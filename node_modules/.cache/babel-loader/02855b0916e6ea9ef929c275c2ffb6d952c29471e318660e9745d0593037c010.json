{"ast":null,"code":"import{transformProps,isCSSVariableName,getValueAsType,numberValueTypes}from'motion-dom';import{buildTransform}from'./build-transform.mjs';function buildHTMLStyles(state,latestValues,transformTemplate){const{style,vars,transformOrigin}=state;// Track whether we encounter any transform or transformOrigin values.\nlet hasTransform=false;let hasTransformOrigin=false;/**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */for(const key in latestValues){const value=latestValues[key];if(transformProps.has(key)){// If this is a transform, flag to enable further transform processing\nhasTransform=true;continue;}else if(isCSSVariableName(key)){vars[key]=value;continue;}else{// Convert the value to its default value type, ie 0 -> \"0px\"\nconst valueAsType=getValueAsType(value,numberValueTypes[key]);if(key.startsWith(\"origin\")){// If this is a transform origin, flag and enable further transform-origin processing\nhasTransformOrigin=true;transformOrigin[key]=valueAsType;}else{style[key]=valueAsType;}}}if(!latestValues.transform){if(hasTransform||transformTemplate){style.transform=buildTransform(latestValues,state.transform,transformTemplate);}else if(style.transform){/**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */style.transform=\"none\";}}/**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */if(hasTransformOrigin){const{originX=\"50%\",originY=\"50%\",originZ=0}=transformOrigin;style.transformOrigin=\"\".concat(originX,\" \").concat(originY,\" \").concat(originZ);}}export{buildHTMLStyles};","map":{"version":3,"names":["transformProps","isCSSVariableName","getValueAsType","numberValueTypes","buildTransform","buildHTMLStyles","state","latestValues","transformTemplate","style","vars","transformOrigin","hasTransform","hasTransformOrigin","key","value","has","valueAsType","startsWith","transform","originX","originY","originZ","concat"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs"],"sourcesContent":["import { transformProps, isCSSVariableName, getValueAsType, numberValueTypes } from 'motion-dom';\nimport { buildTransform } from './build-transform.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n"],"mappings":"AAAA,OAASA,cAAc,CAAEC,iBAAiB,CAAEC,cAAc,CAAEC,gBAAgB,KAAQ,YAAY,CAChG,OAASC,cAAc,KAAQ,uBAAuB,CAEtD,QAAS,CAAAC,eAAeA,CAACC,KAAK,CAAEC,YAAY,CAAEC,iBAAiB,CAAE,CAC7D,KAAM,CAAEC,KAAK,CAAEC,IAAI,CAAEC,eAAgB,CAAC,CAAGL,KAAK,CAC9C;AACA,GAAI,CAAAM,YAAY,CAAG,KAAK,CACxB,GAAI,CAAAC,kBAAkB,CAAG,KAAK,CAC9B;AACJ;AACA;AACA;AACA;AACA,OACI,IAAK,KAAM,CAAAC,GAAG,GAAI,CAAAP,YAAY,CAAE,CAC5B,KAAM,CAAAQ,KAAK,CAAGR,YAAY,CAACO,GAAG,CAAC,CAC/B,GAAId,cAAc,CAACgB,GAAG,CAACF,GAAG,CAAC,CAAE,CACzB;AACAF,YAAY,CAAG,IAAI,CACnB,SACJ,CAAC,IACI,IAAIX,iBAAiB,CAACa,GAAG,CAAC,CAAE,CAC7BJ,IAAI,CAACI,GAAG,CAAC,CAAGC,KAAK,CACjB,SACJ,CAAC,IACI,CACD;AACA,KAAM,CAAAE,WAAW,CAAGf,cAAc,CAACa,KAAK,CAAEZ,gBAAgB,CAACW,GAAG,CAAC,CAAC,CAChE,GAAIA,GAAG,CAACI,UAAU,CAAC,QAAQ,CAAC,CAAE,CAC1B;AACAL,kBAAkB,CAAG,IAAI,CACzBF,eAAe,CAACG,GAAG,CAAC,CAChBG,WAAW,CACnB,CAAC,IACI,CACDR,KAAK,CAACK,GAAG,CAAC,CAAGG,WAAW,CAC5B,CACJ,CACJ,CACA,GAAI,CAACV,YAAY,CAACY,SAAS,CAAE,CACzB,GAAIP,YAAY,EAAIJ,iBAAiB,CAAE,CACnCC,KAAK,CAACU,SAAS,CAAGf,cAAc,CAACG,YAAY,CAAED,KAAK,CAACa,SAAS,CAAEX,iBAAiB,CAAC,CACtF,CAAC,IACI,IAAIC,KAAK,CAACU,SAAS,CAAE,CACtB;AACZ;AACA;AACA,eACYV,KAAK,CAACU,SAAS,CAAG,MAAM,CAC5B,CACJ,CACA;AACJ;AACA;AACA,OACI,GAAIN,kBAAkB,CAAE,CACpB,KAAM,CAAEO,OAAO,CAAG,KAAK,CAAEC,OAAO,CAAG,KAAK,CAAEC,OAAO,CAAG,CAAG,CAAC,CAAGX,eAAe,CAC1EF,KAAK,CAACE,eAAe,IAAAY,MAAA,CAAMH,OAAO,MAAAG,MAAA,CAAIF,OAAO,MAAAE,MAAA,CAAID,OAAO,CAAE,CAC9D,CACJ,CAEA,OAASjB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}