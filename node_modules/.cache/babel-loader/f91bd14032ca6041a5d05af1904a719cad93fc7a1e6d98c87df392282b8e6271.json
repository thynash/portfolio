{"ast":null,"code":"import{percent,mixNumber}from'motion-dom';import{scalePoint}from'./delta-apply.mjs';/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */function removePointDelta(point,translate,scale,originPoint,boxScale){point-=translate;point=scalePoint(point,1/scale,originPoint);if(boxScale!==undefined){point=scalePoint(point,1/boxScale,originPoint);}return point;}/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */function removeAxisDelta(axis){let translate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;let scale=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;let origin=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0.5;let boxScale=arguments.length>4?arguments[4]:undefined;let originAxis=arguments.length>5&&arguments[5]!==undefined?arguments[5]:axis;let sourceAxis=arguments.length>6&&arguments[6]!==undefined?arguments[6]:axis;if(percent.test(translate)){translate=parseFloat(translate);const relativeProgress=mixNumber(sourceAxis.min,sourceAxis.max,translate/100);translate=relativeProgress-sourceAxis.min;}if(typeof translate!==\"number\")return;let originPoint=mixNumber(originAxis.min,originAxis.max,origin);if(axis===originAxis)originPoint-=translate;axis.min=removePointDelta(axis.min,translate,scale,originPoint,boxScale);axis.max=removePointDelta(axis.max,translate,scale,originPoint,boxScale);}/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */function removeAxisTransforms(axis,transforms,_ref,origin,sourceAxis){let[key,scaleKey,originKey]=_ref;removeAxisDelta(axis,transforms[key],transforms[scaleKey],transforms[originKey],transforms.scale,origin,sourceAxis);}/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */const xKeys=[\"x\",\"scaleX\",\"originX\"];const yKeys=[\"y\",\"scaleY\",\"originY\"];/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */function removeBoxTransforms(box,transforms,originBox,sourceBox){removeAxisTransforms(box.x,transforms,xKeys,originBox?originBox.x:undefined,sourceBox?sourceBox.x:undefined);removeAxisTransforms(box.y,transforms,yKeys,originBox?originBox.y:undefined,sourceBox?sourceBox.y:undefined);}export{removeAxisDelta,removeAxisTransforms,removeBoxTransforms,removePointDelta};","map":{"version":3,"names":["percent","mixNumber","scalePoint","removePointDelta","point","translate","scale","originPoint","boxScale","undefined","removeAxisDelta","axis","arguments","length","origin","originAxis","sourceAxis","test","parseFloat","relativeProgress","min","max","removeAxisTransforms","transforms","_ref","key","scaleKey","originKey","xKeys","yKeys","removeBoxTransforms","box","originBox","sourceBox","x","y"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs"],"sourcesContent":["import { percent, mixNumber } from 'motion-dom';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}