{"ast":null,"code":"import{useContext,useId,useEffect,useCallback}from'react';import{PresenceContext}from'../../context/PresenceContext.mjs';/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */function usePresence(){let subscribe=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;const context=useContext(PresenceContext);if(context===null)return[true,null];const{isPresent,onExitComplete,register}=context;// It's safe to call the following hooks conditionally (after an early return) because the context will always\n// either be null or non-null for the lifespan of the component.\nconst id=useId();useEffect(()=>{if(subscribe){return register(id);}},[subscribe]);const safeToRemove=useCallback(()=>subscribe&&onExitComplete&&onExitComplete(id),[id,onExitComplete,subscribe]);return!isPresent&&onExitComplete?[false,safeToRemove]:[true];}/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */function useIsPresent(){return isPresent(useContext(PresenceContext));}function isPresent(context){return context===null?true:context.isPresent;}export{isPresent,useIsPresent,usePresence};","map":{"version":3,"names":["useContext","useId","useEffect","useCallback","PresenceContext","usePresence","subscribe","arguments","length","undefined","context","isPresent","onExitComplete","register","id","safeToRemove","useIsPresent"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs"],"sourcesContent":["import { useContext, useId, useEffect, useCallback } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence(subscribe = true) {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => {\n        if (subscribe) {\n            return register(id);\n        }\n    }, [subscribe]);\n    const safeToRemove = useCallback(() => subscribe && onExitComplete && onExitComplete(id), [id, onExitComplete, subscribe]);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n"],"mappings":"AAAA,OAASA,UAAU,CAAEC,KAAK,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CACjE,OAASC,eAAe,KAAQ,mCAAmC,CAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,WAAWA,CAAA,CAAmB,IAAlB,CAAAC,SAAS,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACjC,KAAM,CAAAG,OAAO,CAAGV,UAAU,CAACI,eAAe,CAAC,CAC3C,GAAIM,OAAO,GAAK,IAAI,CAChB,MAAO,CAAC,IAAI,CAAE,IAAI,CAAC,CACvB,KAAM,CAAEC,SAAS,CAAEC,cAAc,CAAEC,QAAS,CAAC,CAAGH,OAAO,CACvD;AACA;AACA,KAAM,CAAAI,EAAE,CAAGb,KAAK,CAAC,CAAC,CAClBC,SAAS,CAAC,IAAM,CACZ,GAAII,SAAS,CAAE,CACX,MAAO,CAAAO,QAAQ,CAACC,EAAE,CAAC,CACvB,CACJ,CAAC,CAAE,CAACR,SAAS,CAAC,CAAC,CACf,KAAM,CAAAS,YAAY,CAAGZ,WAAW,CAAC,IAAMG,SAAS,EAAIM,cAAc,EAAIA,cAAc,CAACE,EAAE,CAAC,CAAE,CAACA,EAAE,CAAEF,cAAc,CAAEN,SAAS,CAAC,CAAC,CAC1H,MAAO,CAACK,SAAS,EAAIC,cAAc,CAAG,CAAC,KAAK,CAAEG,YAAY,CAAC,CAAG,CAAC,IAAI,CAAC,CACxE,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,YAAYA,CAAA,CAAG,CACpB,MAAO,CAAAL,SAAS,CAACX,UAAU,CAACI,eAAe,CAAC,CAAC,CACjD,CACA,QAAS,CAAAO,SAASA,CAACD,OAAO,CAAE,CACxB,MAAO,CAAAA,OAAO,GAAK,IAAI,CAAG,IAAI,CAAGA,OAAO,CAACC,SAAS,CACtD,CAEA,OAASA,SAAS,CAAEK,YAAY,CAAEX,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}