{"ast":null,"code":"import{isPressing}from'./state.mjs';/**\n * Filter out events that are not \"Enter\" keys.\n */function filterEvents(callback){return event=>{if(event.key!==\"Enter\")return;callback(event);};}function firePointerEvent(target,type){target.dispatchEvent(new PointerEvent(\"pointer\"+type,{isPrimary:true,bubbles:true}));}const enableKeyboardPress=(focusEvent,eventOptions)=>{const element=focusEvent.currentTarget;if(!element)return;const handleKeydown=filterEvents(()=>{if(isPressing.has(element))return;firePointerEvent(element,\"down\");const handleKeyup=filterEvents(()=>{firePointerEvent(element,\"up\");});const handleBlur=()=>firePointerEvent(element,\"cancel\");element.addEventListener(\"keyup\",handleKeyup,eventOptions);element.addEventListener(\"blur\",handleBlur,eventOptions);});element.addEventListener(\"keydown\",handleKeydown,eventOptions);/**\n     * Add an event listener that fires on blur to remove the keydown events.\n     */element.addEventListener(\"blur\",()=>element.removeEventListener(\"keydown\",handleKeydown),eventOptions);};export{enableKeyboardPress};","map":{"version":3,"names":["isPressing","filterEvents","callback","event","key","firePointerEvent","target","type","dispatchEvent","PointerEvent","isPrimary","bubbles","enableKeyboardPress","focusEvent","eventOptions","element","currentTarget","handleKeydown","has","handleKeyup","handleBlur","addEventListener","removeEventListener"],"sources":["/home/antisyn/portfolio/src/components/node_modules/motion-dom/dist/es/gestures/press/utils/keyboard.mjs"],"sourcesContent":["import { isPressing } from './state.mjs';\n\n/**\n * Filter out events that are not \"Enter\" keys.\n */\nfunction filterEvents(callback) {\n    return (event) => {\n        if (event.key !== \"Enter\")\n            return;\n        callback(event);\n    };\n}\nfunction firePointerEvent(target, type) {\n    target.dispatchEvent(new PointerEvent(\"pointer\" + type, { isPrimary: true, bubbles: true }));\n}\nconst enableKeyboardPress = (focusEvent, eventOptions) => {\n    const element = focusEvent.currentTarget;\n    if (!element)\n        return;\n    const handleKeydown = filterEvents(() => {\n        if (isPressing.has(element))\n            return;\n        firePointerEvent(element, \"down\");\n        const handleKeyup = filterEvents(() => {\n            firePointerEvent(element, \"up\");\n        });\n        const handleBlur = () => firePointerEvent(element, \"cancel\");\n        element.addEventListener(\"keyup\", handleKeyup, eventOptions);\n        element.addEventListener(\"blur\", handleBlur, eventOptions);\n    });\n    element.addEventListener(\"keydown\", handleKeydown, eventOptions);\n    /**\n     * Add an event listener that fires on blur to remove the keydown events.\n     */\n    element.addEventListener(\"blur\", () => element.removeEventListener(\"keydown\", handleKeydown), eventOptions);\n};\n\nexport { enableKeyboardPress };\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,aAAa,CAExC;AACA;AACA,GACA,QAAS,CAAAC,YAAYA,CAACC,QAAQ,CAAE,CAC5B,MAAQ,CAAAC,KAAK,EAAK,CACd,GAAIA,KAAK,CAACC,GAAG,GAAK,OAAO,CACrB,OACJF,QAAQ,CAACC,KAAK,CAAC,CACnB,CAAC,CACL,CACA,QAAS,CAAAE,gBAAgBA,CAACC,MAAM,CAAEC,IAAI,CAAE,CACpCD,MAAM,CAACE,aAAa,CAAC,GAAI,CAAAC,YAAY,CAAC,SAAS,CAAGF,IAAI,CAAE,CAAEG,SAAS,CAAE,IAAI,CAAEC,OAAO,CAAE,IAAK,CAAC,CAAC,CAAC,CAChG,CACA,KAAM,CAAAC,mBAAmB,CAAGA,CAACC,UAAU,CAAEC,YAAY,GAAK,CACtD,KAAM,CAAAC,OAAO,CAAGF,UAAU,CAACG,aAAa,CACxC,GAAI,CAACD,OAAO,CACR,OACJ,KAAM,CAAAE,aAAa,CAAGhB,YAAY,CAAC,IAAM,CACrC,GAAID,UAAU,CAACkB,GAAG,CAACH,OAAO,CAAC,CACvB,OACJV,gBAAgB,CAACU,OAAO,CAAE,MAAM,CAAC,CACjC,KAAM,CAAAI,WAAW,CAAGlB,YAAY,CAAC,IAAM,CACnCI,gBAAgB,CAACU,OAAO,CAAE,IAAI,CAAC,CACnC,CAAC,CAAC,CACF,KAAM,CAAAK,UAAU,CAAGA,CAAA,GAAMf,gBAAgB,CAACU,OAAO,CAAE,QAAQ,CAAC,CAC5DA,OAAO,CAACM,gBAAgB,CAAC,OAAO,CAAEF,WAAW,CAAEL,YAAY,CAAC,CAC5DC,OAAO,CAACM,gBAAgB,CAAC,MAAM,CAAED,UAAU,CAAEN,YAAY,CAAC,CAC9D,CAAC,CAAC,CACFC,OAAO,CAACM,gBAAgB,CAAC,SAAS,CAAEJ,aAAa,CAAEH,YAAY,CAAC,CAChE;AACJ;AACA,OACIC,OAAO,CAACM,gBAAgB,CAAC,MAAM,CAAE,IAAMN,OAAO,CAACO,mBAAmB,CAAC,SAAS,CAAEL,aAAa,CAAC,CAAEH,YAAY,CAAC,CAC/G,CAAC,CAED,OAASF,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}