{"ast":null,"code":"import{addUniqueItem,removeItem}from'motion-utils';class NodeStack{constructor(){this.members=[];}add(node){addUniqueItem(this.members,node);node.scheduleRender();}remove(node){removeItem(this.members,node);if(node===this.prevLead){this.prevLead=undefined;}if(node===this.lead){const prevLead=this.members[this.members.length-1];if(prevLead){this.promote(prevLead);}}}relegate(node){const indexOfNode=this.members.findIndex(member=>node===member);if(indexOfNode===0)return false;/**\n         * Find the next projection node that is present\n         */let prevLead;for(let i=indexOfNode;i>=0;i--){const member=this.members[i];if(member.isPresent!==false){prevLead=member;break;}}if(prevLead){this.promote(prevLead);return true;}else{return false;}}promote(node,preserveFollowOpacity){const prevLead=this.lead;if(node===prevLead)return;this.prevLead=prevLead;this.lead=node;node.show();if(prevLead){prevLead.instance&&prevLead.scheduleRender();node.scheduleRender();node.resumeFrom=prevLead;if(preserveFollowOpacity){node.resumeFrom.preserveOpacity=true;}if(prevLead.snapshot){node.snapshot=prevLead.snapshot;node.snapshot.latestValues=prevLead.animationValues||prevLead.latestValues;}if(node.root&&node.root.isUpdating){node.isLayoutDirty=true;}const{crossfade}=node.options;if(crossfade===false){prevLead.hide();}/**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */}}exitAnimationComplete(){this.members.forEach(node=>{const{options,resumingFrom}=node;options.onExitComplete&&options.onExitComplete();if(resumingFrom){resumingFrom.options.onExitComplete&&resumingFrom.options.onExitComplete();}});}scheduleRender(){this.members.forEach(node=>{node.instance&&node.scheduleRender(false);});}/**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */removeLeadSnapshot(){if(this.lead&&this.lead.snapshot){this.lead.snapshot=undefined;}}}export{NodeStack};","map":{"version":3,"names":["addUniqueItem","removeItem","NodeStack","constructor","members","add","node","scheduleRender","remove","prevLead","undefined","lead","length","promote","relegate","indexOfNode","findIndex","member","i","isPresent","preserveFollowOpacity","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","root","isUpdating","isLayoutDirty","crossfade","options","hide","exitAnimationComplete","forEach","resumingFrom","onExitComplete","removeLeadSnapshot"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/projection/shared/stack.mjs"],"sourcesContent":["import { addUniqueItem, removeItem } from 'motion-utils';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}