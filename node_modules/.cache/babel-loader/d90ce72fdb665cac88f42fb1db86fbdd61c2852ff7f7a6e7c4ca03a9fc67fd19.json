{"ast":null,"code":"import{addUniqueItem,removeItem}from'./array.mjs';class SubscriptionManager{constructor(){this.subscriptions=[];}add(handler){addUniqueItem(this.subscriptions,handler);return()=>removeItem(this.subscriptions,handler);}notify(a,b,c){const numSubscriptions=this.subscriptions.length;if(!numSubscriptions)return;if(numSubscriptions===1){/**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */this.subscriptions[0](a,b,c);}else{for(let i=0;i<numSubscriptions;i++){/**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */const handler=this.subscriptions[i];handler&&handler(a,b,c);}}}getSize(){return this.subscriptions.length;}clear(){this.subscriptions.length=0;}}export{SubscriptionManager};","map":{"version":3,"names":["addUniqueItem","removeItem","SubscriptionManager","constructor","subscriptions","add","handler","notify","a","b","c","numSubscriptions","length","i","getSize","clear"],"sources":["/home/antisyn/portfolio/src/components/node_modules/motion-utils/dist/es/subscription-manager.mjs"],"sourcesContent":["import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n"],"mappings":"AAAA,OAASA,aAAa,CAAEC,UAAU,KAAQ,aAAa,CAEvD,KAAM,CAAAC,mBAAoB,CACtBC,WAAWA,CAAA,CAAG,CACV,IAAI,CAACC,aAAa,CAAG,EAAE,CAC3B,CACAC,GAAGA,CAACC,OAAO,CAAE,CACTN,aAAa,CAAC,IAAI,CAACI,aAAa,CAAEE,OAAO,CAAC,CAC1C,MAAO,IAAML,UAAU,CAAC,IAAI,CAACG,aAAa,CAAEE,OAAO,CAAC,CACxD,CACAC,MAAMA,CAACC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAE,CACZ,KAAM,CAAAC,gBAAgB,CAAG,IAAI,CAACP,aAAa,CAACQ,MAAM,CAClD,GAAI,CAACD,gBAAgB,CACjB,OACJ,GAAIA,gBAAgB,GAAK,CAAC,CAAE,CACxB;AACZ;AACA,eACY,IAAI,CAACP,aAAa,CAAC,CAAC,CAAC,CAACI,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAC,CAClC,CAAC,IACI,CACD,IAAK,GAAI,CAAAG,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,gBAAgB,CAAEE,CAAC,EAAE,CAAE,CACvC;AAChB;AACA;AACA,mBACgB,KAAM,CAAAP,OAAO,CAAG,IAAI,CAACF,aAAa,CAACS,CAAC,CAAC,CACrCP,OAAO,EAAIA,OAAO,CAACE,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAC,CAC/B,CACJ,CACJ,CACAI,OAAOA,CAAA,CAAG,CACN,MAAO,KAAI,CAACV,aAAa,CAACQ,MAAM,CACpC,CACAG,KAAKA,CAAA,CAAG,CACJ,IAAI,CAACX,aAAa,CAACQ,MAAM,CAAG,CAAC,CACjC,CACJ,CAEA,OAASV,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}