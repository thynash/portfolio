{"ast":null,"code":"import _objectSpread from\"/home/antisyn/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/home/antisyn/portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"motionValue\",\"onUpdate\",\"onComplete\",\"element\"];import{secondsToMilliseconds}from'motion-utils';import{JSAnimation}from'./JSAnimation.mjs';import{NativeAnimation}from'./NativeAnimation.mjs';import{replaceTransitionType}from'./utils/replace-transition-type.mjs';import{replaceStringEasing}from'./waapi/utils/unsupported-easing.mjs';/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */const sampleDelta=10;//ms\nclass NativeAnimationExtended extends NativeAnimation{constructor(options){/**\n         * The base NativeAnimation function only supports a subset\n         * of Motion easings, and WAAPI also only supports some\n         * easing functions via string/cubic-bezier definitions.\n         *\n         * This function replaces those unsupported easing functions\n         * with a JS easing function. This will later get compiled\n         * to a linear() easing function.\n         */replaceStringEasing(options);/**\n         * Ensure we replace the transition type with a generator function\n         * before passing to WAAPI.\n         *\n         * TODO: Does this have a better home? It could be shared with\n         * JSAnimation.\n         */replaceTransitionType(options);super(options);if(options.startTime){this.startTime=options.startTime;}this.options=options;}/**\n     * WAAPI doesn't natively have any interruption capabilities.\n     *\n     * Rather than read commited styles back out of the DOM, we can\n     * create a renderless JS animation and sample it twice to calculate\n     * its current value, \"previous\" value, and therefore allow\n     * Motion to calculate velocity for any subsequent animation.\n     */updateMotionValue(value){var _this$finishedTime;const _this$options=this.options,{motionValue,onUpdate,onComplete,element}=_this$options,options=_objectWithoutProperties(_this$options,_excluded);if(!motionValue)return;if(value!==undefined){motionValue.set(value);return;}const sampleAnimation=new JSAnimation(_objectSpread(_objectSpread({},options),{},{autoplay:false}));const sampleTime=secondsToMilliseconds((_this$finishedTime=this.finishedTime)!==null&&_this$finishedTime!==void 0?_this$finishedTime:this.time);motionValue.setWithVelocity(sampleAnimation.sample(sampleTime-sampleDelta).value,sampleAnimation.sample(sampleTime).value,sampleDelta);sampleAnimation.stop();}}export{NativeAnimationExtended};","map":{"version":3,"names":["secondsToMilliseconds","JSAnimation","NativeAnimation","replaceTransitionType","replaceStringEasing","sampleDelta","NativeAnimationExtended","constructor","options","startTime","updateMotionValue","value","_this$finishedTime","_this$options","motionValue","onUpdate","onComplete","element","_objectWithoutProperties","_excluded","undefined","set","sampleAnimation","_objectSpread","autoplay","sampleTime","finishedTime","time","setWithVelocity","sample","stop"],"sources":["/home/antisyn/portfolio/src/components/node_modules/motion-dom/dist/es/animation/NativeAnimationExtended.mjs"],"sourcesContent":["import { secondsToMilliseconds } from 'motion-utils';\nimport { JSAnimation } from './JSAnimation.mjs';\nimport { NativeAnimation } from './NativeAnimation.mjs';\nimport { replaceTransitionType } from './utils/replace-transition-type.mjs';\nimport { replaceStringEasing } from './waapi/utils/unsupported-easing.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nclass NativeAnimationExtended extends NativeAnimation {\n    constructor(options) {\n        /**\n         * The base NativeAnimation function only supports a subset\n         * of Motion easings, and WAAPI also only supports some\n         * easing functions via string/cubic-bezier definitions.\n         *\n         * This function replaces those unsupported easing functions\n         * with a JS easing function. This will later get compiled\n         * to a linear() easing function.\n         */\n        replaceStringEasing(options);\n        /**\n         * Ensure we replace the transition type with a generator function\n         * before passing to WAAPI.\n         *\n         * TODO: Does this have a better home? It could be shared with\n         * JSAnimation.\n         */\n        replaceTransitionType(options);\n        super(options);\n        if (options.startTime) {\n            this.startTime = options.startTime;\n        }\n        this.options = options;\n    }\n    /**\n     * WAAPI doesn't natively have any interruption capabilities.\n     *\n     * Rather than read commited styles back out of the DOM, we can\n     * create a renderless JS animation and sample it twice to calculate\n     * its current value, \"previous\" value, and therefore allow\n     * Motion to calculate velocity for any subsequent animation.\n     */\n    updateMotionValue(value) {\n        const { motionValue, onUpdate, onComplete, element, ...options } = this.options;\n        if (!motionValue)\n            return;\n        if (value !== undefined) {\n            motionValue.set(value);\n            return;\n        }\n        const sampleAnimation = new JSAnimation({\n            ...options,\n            autoplay: false,\n        });\n        const sampleTime = secondsToMilliseconds(this.finishedTime ?? this.time);\n        motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n        sampleAnimation.stop();\n    }\n}\n\nexport { NativeAnimationExtended };\n"],"mappings":"+SAAA,OAASA,qBAAqB,KAAQ,cAAc,CACpD,OAASC,WAAW,KAAQ,mBAAmB,CAC/C,OAASC,eAAe,KAAQ,uBAAuB,CACvD,OAASC,qBAAqB,KAAQ,qCAAqC,CAC3E,OAASC,mBAAmB,KAAQ,sCAAsC,CAE1E;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,WAAW,CAAG,EAAE,CAAE;AACxB,KAAM,CAAAC,uBAAuB,QAAS,CAAAJ,eAAgB,CAClDK,WAAWA,CAACC,OAAO,CAAE,CACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WACQJ,mBAAmB,CAACI,OAAO,CAAC,CAC5B;AACR;AACA;AACA;AACA;AACA;AACA,WACQL,qBAAqB,CAACK,OAAO,CAAC,CAC9B,KAAK,CAACA,OAAO,CAAC,CACd,GAAIA,OAAO,CAACC,SAAS,CAAE,CACnB,IAAI,CAACA,SAAS,CAAGD,OAAO,CAACC,SAAS,CACtC,CACA,IAAI,CAACD,OAAO,CAAGA,OAAO,CAC1B,CACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OACIE,iBAAiBA,CAACC,KAAK,CAAE,KAAAC,kBAAA,CACrB,MAAAC,aAAA,CAAmE,IAAI,CAACL,OAAO,CAAzE,CAAEM,WAAW,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,OAAoB,CAAC,CAAAJ,aAAA,CAATL,OAAO,CAAAU,wBAAA,CAAAL,aAAA,CAAAM,SAAA,EAC9D,GAAI,CAACL,WAAW,CACZ,OACJ,GAAIH,KAAK,GAAKS,SAAS,CAAE,CACrBN,WAAW,CAACO,GAAG,CAACV,KAAK,CAAC,CACtB,OACJ,CACA,KAAM,CAAAW,eAAe,CAAG,GAAI,CAAArB,WAAW,CAAAsB,aAAA,CAAAA,aAAA,IAChCf,OAAO,MACVgB,QAAQ,CAAE,KAAK,EAClB,CAAC,CACF,KAAM,CAAAC,UAAU,CAAGzB,qBAAqB,EAAAY,kBAAA,CAAC,IAAI,CAACc,YAAY,UAAAd,kBAAA,UAAAA,kBAAA,CAAI,IAAI,CAACe,IAAI,CAAC,CACxEb,WAAW,CAACc,eAAe,CAACN,eAAe,CAACO,MAAM,CAACJ,UAAU,CAAGpB,WAAW,CAAC,CAACM,KAAK,CAAEW,eAAe,CAACO,MAAM,CAACJ,UAAU,CAAC,CAACd,KAAK,CAAEN,WAAW,CAAC,CAC1IiB,eAAe,CAACQ,IAAI,CAAC,CAAC,CAC1B,CACJ,CAEA,OAASxB,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}