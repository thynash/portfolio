{"ast":null,"code":"import{warnOnce,SubscriptionManager,velocityPerSecond}from'motion-utils';import{time}from'../frameloop/sync-time.mjs';import{frame}from'../frameloop/frame.mjs';/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */const MAX_VELOCITY_DELTA=30;const isFloat=value=>{return!isNaN(parseFloat(value));};const collectMotionValues={current:undefined};/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */class MotionValue{/**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     */constructor(init){var _this=this;let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};/**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */this.canTrackVelocity=null;/**\n         * An object containing a SubscriptionManager for each active event.\n         */this.events={};this.updateAndNotify=function(v){let render=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;const currentTime=time.now();/**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */if(_this.updatedAt!==currentTime){_this.setPrevFrameValue();}_this.prev=_this.current;_this.setCurrent(v);// Update update subscribers\nif(_this.current!==_this.prev){var _this$events$change;(_this$events$change=_this.events.change)===null||_this$events$change===void 0?void 0:_this$events$change.notify(_this.current);if(_this.dependents){for(const dependent of _this.dependents){dependent.dirty();}}}// Update render subscribers\nif(render){var _this$events$renderRe;(_this$events$renderRe=_this.events.renderRequest)===null||_this$events$renderRe===void 0?void 0:_this$events$renderRe.notify(_this.current);}};this.hasAnimated=false;this.setCurrent(init);this.owner=options.owner;}setCurrent(current){this.current=current;this.updatedAt=time.now();if(this.canTrackVelocity===null&&current!==undefined){this.canTrackVelocity=isFloat(this.current);}}setPrevFrameValue(){let prevFrameValue=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.current;this.prevFrameValue=prevFrameValue;this.prevUpdatedAt=this.updatedAt;}/**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */onChange(subscription){if(process.env.NODE_ENV!==\"production\"){warnOnce(false,\"value.onChange(callback) is deprecated. Switch to value.on(\\\"change\\\", callback).\");}return this.on(\"change\",subscription);}on(eventName,callback){if(!this.events[eventName]){this.events[eventName]=new SubscriptionManager();}const unsubscribe=this.events[eventName].add(callback);if(eventName===\"change\"){return()=>{unsubscribe();/**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */frame.read(()=>{if(!this.events.change.getSize()){this.stop();}});};}return unsubscribe;}clearListeners(){for(const eventManagers in this.events){this.events[eventManagers].clear();}}/**\n     * Attaches a passive effect to the `MotionValue`.\n     */attach(passiveEffect,stopPassiveEffect){this.passiveEffect=passiveEffect;this.stopPassiveEffect=stopPassiveEffect;}/**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */set(v){let render=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(!render||!this.passiveEffect){this.updateAndNotify(v,render);}else{this.passiveEffect(v,this.updateAndNotify);}}setWithVelocity(prev,current,delta){this.set(current);this.prev=undefined;this.prevFrameValue=prev;this.prevUpdatedAt=this.updatedAt-delta;}/**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */jump(v){let endAnimation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;this.updateAndNotify(v);this.prev=v;this.prevUpdatedAt=this.prevFrameValue=undefined;endAnimation&&this.stop();if(this.stopPassiveEffect)this.stopPassiveEffect();}dirty(){var _this$events$change2;(_this$events$change2=this.events.change)===null||_this$events$change2===void 0?void 0:_this$events$change2.notify(this.current);}addDependent(dependent){if(!this.dependents){this.dependents=new Set();}this.dependents.add(dependent);}removeDependent(dependent){if(this.dependents){this.dependents.delete(dependent);}}/**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */get(){if(collectMotionValues.current){collectMotionValues.current.push(this);}return this.current;}/**\n     * @public\n     */getPrevious(){return this.prev;}/**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */getVelocity(){const currentTime=time.now();if(!this.canTrackVelocity||this.prevFrameValue===undefined||currentTime-this.updatedAt>MAX_VELOCITY_DELTA){return 0;}const delta=Math.min(this.updatedAt-this.prevUpdatedAt,MAX_VELOCITY_DELTA);// Casts because of parseFloat's poor typing\nreturn velocityPerSecond(parseFloat(this.current)-parseFloat(this.prevFrameValue),delta);}/**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     */start(startAnimation){this.stop();return new Promise(resolve=>{this.hasAnimated=true;this.animation=startAnimation(resolve);if(this.events.animationStart){this.events.animationStart.notify();}}).then(()=>{if(this.events.animationComplete){this.events.animationComplete.notify();}this.clearAnimation();});}/**\n     * Stop the currently active animation.\n     *\n     * @public\n     */stop(){if(this.animation){this.animation.stop();if(this.events.animationCancel){this.events.animationCancel.notify();}}this.clearAnimation();}/**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */isAnimating(){return!!this.animation;}clearAnimation(){delete this.animation;}/**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */destroy(){var _this$dependents,_this$events$destroy;(_this$dependents=this.dependents)===null||_this$dependents===void 0?void 0:_this$dependents.clear();(_this$events$destroy=this.events.destroy)===null||_this$events$destroy===void 0?void 0:_this$events$destroy.notify();this.clearListeners();this.stop();if(this.stopPassiveEffect){this.stopPassiveEffect();}}}function motionValue(init,options){return new MotionValue(init,options);}export{MotionValue,collectMotionValues,motionValue};","map":{"version":3,"names":["warnOnce","SubscriptionManager","velocityPerSecond","time","frame","MAX_VELOCITY_DELTA","isFloat","value","isNaN","parseFloat","collectMotionValues","current","undefined","MotionValue","constructor","init","_this","options","arguments","length","canTrackVelocity","events","updateAndNotify","v","render","currentTime","now","updatedAt","setPrevFrameValue","prev","setCurrent","_this$events$change","change","notify","dependents","dependent","dirty","_this$events$renderRe","renderRequest","hasAnimated","owner","prevFrameValue","prevUpdatedAt","onChange","subscription","process","env","NODE_ENV","on","eventName","callback","unsubscribe","add","read","getSize","stop","clearListeners","eventManagers","clear","attach","passiveEffect","stopPassiveEffect","set","setWithVelocity","delta","jump","endAnimation","_this$events$change2","addDependent","Set","removeDependent","delete","get","push","getPrevious","getVelocity","Math","min","start","startAnimation","Promise","resolve","animation","animationStart","then","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","_this$dependents","_this$events$destroy","motionValue"],"sources":["/home/antisyn/portfolio/src/components/node_modules/motion-dom/dist/es/value/index.mjs"],"sourcesContent":["import { warnOnce, SubscriptionManager, velocityPerSecond } from 'motion-utils';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     */\n    constructor(init, options = {}) {\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = null;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev) {\n                this.events.change?.notify(this.current);\n                if (this.dependents) {\n                    for (const dependent of this.dependents) {\n                        dependent.dirty();\n                    }\n                }\n            }\n            // Update render subscribers\n            if (render) {\n                this.events.renderRequest?.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n        if (this.canTrackVelocity === null && current !== undefined) {\n            this.canTrackVelocity = isFloat(this.current);\n        }\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v, endAnimation = true) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        endAnimation && this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    dirty() {\n        this.events.change?.notify(this.current);\n    }\n    addDependent(dependent) {\n        if (!this.dependents) {\n            this.dependents = new Set();\n        }\n        this.dependents.add(dependent);\n    }\n    removeDependent(dependent) {\n        if (this.dependents) {\n            this.dependents.delete(dependent);\n        }\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.dependents?.clear();\n        this.events.destroy?.notify();\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}