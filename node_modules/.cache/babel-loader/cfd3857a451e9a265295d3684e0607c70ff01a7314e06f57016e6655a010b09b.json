{"ast":null,"code":"import{warnOnce}from'motion-utils';import{useState}from'react';import{initPrefersReducedMotion}from'./index.mjs';import{hasReducedMotionListener,prefersReducedMotion}from'./state.mjs';/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */function useReducedMotion(){/**\n     * Lazy initialisation of prefersReducedMotion\n     */!hasReducedMotionListener.current&&initPrefersReducedMotion();const[shouldReduceMotion]=useState(prefersReducedMotion.current);if(process.env.NODE_ENV!==\"production\"){warnOnce(shouldReduceMotion!==true,\"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");}/**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */return shouldReduceMotion;}export{useReducedMotion};","map":{"version":3,"names":["warnOnce","useState","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","useReducedMotion","current","shouldReduceMotion","process","env","NODE_ENV"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/utils/reduced-motion/use-reduced-motion.mjs"],"sourcesContent":["import { warnOnce } from 'motion-utils';\nimport { useState } from 'react';\nimport { initPrefersReducedMotion } from './index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */\n    !hasReducedMotionListener.current && initPrefersReducedMotion();\n    const [shouldReduceMotion] = useState(prefersReducedMotion.current);\n    if (process.env.NODE_ENV !== \"production\") {\n        warnOnce(shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */\n    return shouldReduceMotion;\n}\n\nexport { useReducedMotion };\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,cAAc,CACvC,OAASC,QAAQ,KAAQ,OAAO,CAChC,OAASC,wBAAwB,KAAQ,aAAa,CACtD,OAASC,wBAAwB,CAAEC,oBAAoB,KAAQ,aAAa,CAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,gBAAgBA,CAAA,CAAG,CACxB;AACJ;AACA,OACI,CAACF,wBAAwB,CAACG,OAAO,EAAIJ,wBAAwB,CAAC,CAAC,CAC/D,KAAM,CAACK,kBAAkB,CAAC,CAAGN,QAAQ,CAACG,oBAAoB,CAACE,OAAO,CAAC,CACnE,GAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACvCV,QAAQ,CAACO,kBAAkB,GAAK,IAAI,CAAE,wFAAwF,CAAC,CACnI,CACA;AACJ;AACA,OACI,MAAO,CAAAA,kBAAkB,CAC7B,CAEA,OAASF,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}