{"ast":null,"code":"import{press,frame}from'motion-dom';import{extractEventInfo}from'../events/event-info.mjs';import{Feature}from'../motion/features/Feature.mjs';function handlePressEvent(node,event,lifecycle){const{props}=node;if(node.current instanceof HTMLButtonElement&&node.current.disabled){return;}if(node.animationState&&props.whileTap){node.animationState.setActive(\"whileTap\",lifecycle===\"Start\");}const eventName=\"onTap\"+(lifecycle===\"End\"?\"\":lifecycle);const callback=props[eventName];if(callback){frame.postRender(()=>callback(event,extractEventInfo(event)));}}class PressGesture extends Feature{mount(){const{current}=this.node;if(!current)return;this.unmount=press(current,(_element,startEvent)=>{handlePressEvent(this.node,startEvent,\"Start\");return(endEvent,_ref)=>{let{success}=_ref;return handlePressEvent(this.node,endEvent,success?\"End\":\"Cancel\");};},{useGlobalTarget:this.node.props.globalTapTarget});}unmount(){}}export{PressGesture};","map":{"version":3,"names":["press","frame","extractEventInfo","Feature","handlePressEvent","node","event","lifecycle","props","current","HTMLButtonElement","disabled","animationState","whileTap","setActive","eventName","callback","postRender","PressGesture","mount","unmount","_element","startEvent","endEvent","_ref","success","useGlobalTarget","globalTapTarget"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/gestures/press.mjs"],"sourcesContent":["import { press, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.current instanceof HTMLButtonElement && node.current.disabled) {\n        return;\n    }\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle));\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = press(current, (_element, startEvent) => {\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n        }, { useGlobalTarget: this.node.props.globalTapTarget });\n    }\n    unmount() { }\n}\n\nexport { PressGesture };\n"],"mappings":"AAAA,OAASA,KAAK,CAAEC,KAAK,KAAQ,YAAY,CACzC,OAASC,gBAAgB,KAAQ,0BAA0B,CAC3D,OAASC,OAAO,KAAQ,gCAAgC,CAExD,QAAS,CAAAC,gBAAgBA,CAACC,IAAI,CAAEC,KAAK,CAAEC,SAAS,CAAE,CAC9C,KAAM,CAAEC,KAAM,CAAC,CAAGH,IAAI,CACtB,GAAIA,IAAI,CAACI,OAAO,WAAY,CAAAC,iBAAiB,EAAIL,IAAI,CAACI,OAAO,CAACE,QAAQ,CAAE,CACpE,OACJ,CACA,GAAIN,IAAI,CAACO,cAAc,EAAIJ,KAAK,CAACK,QAAQ,CAAE,CACvCR,IAAI,CAACO,cAAc,CAACE,SAAS,CAAC,UAAU,CAAEP,SAAS,GAAK,OAAO,CAAC,CACpE,CACA,KAAM,CAAAQ,SAAS,CAAI,OAAO,EAAIR,SAAS,GAAK,KAAK,CAAG,EAAE,CAAGA,SAAS,CAAE,CACpE,KAAM,CAAAS,QAAQ,CAAGR,KAAK,CAACO,SAAS,CAAC,CACjC,GAAIC,QAAQ,CAAE,CACVf,KAAK,CAACgB,UAAU,CAAC,IAAMD,QAAQ,CAACV,KAAK,CAAEJ,gBAAgB,CAACI,KAAK,CAAC,CAAC,CAAC,CACpE,CACJ,CACA,KAAM,CAAAY,YAAY,QAAS,CAAAf,OAAQ,CAC/BgB,KAAKA,CAAA,CAAG,CACJ,KAAM,CAAEV,OAAQ,CAAC,CAAG,IAAI,CAACJ,IAAI,CAC7B,GAAI,CAACI,OAAO,CACR,OACJ,IAAI,CAACW,OAAO,CAAGpB,KAAK,CAACS,OAAO,CAAE,CAACY,QAAQ,CAAEC,UAAU,GAAK,CACpDlB,gBAAgB,CAAC,IAAI,CAACC,IAAI,CAAEiB,UAAU,CAAE,OAAO,CAAC,CAChD,MAAO,CAACC,QAAQ,CAAAC,IAAA,OAAE,CAAEC,OAAQ,CAAC,CAAAD,IAAA,OAAK,CAAApB,gBAAgB,CAAC,IAAI,CAACC,IAAI,CAAEkB,QAAQ,CAAEE,OAAO,CAAG,KAAK,CAAG,QAAQ,CAAC,GACvG,CAAC,CAAE,CAAEC,eAAe,CAAE,IAAI,CAACrB,IAAI,CAACG,KAAK,CAACmB,eAAgB,CAAC,CAAC,CAC5D,CACAP,OAAOA,CAAA,CAAG,CAAE,CAChB,CAEA,OAASF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}