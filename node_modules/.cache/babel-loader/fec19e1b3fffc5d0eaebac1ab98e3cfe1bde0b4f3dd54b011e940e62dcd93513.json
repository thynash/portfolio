{"ast":null,"code":"import{easeInOut,isEasingArray,easingDefinitionToFunction}from'motion-utils';import{interpolate}from'../../utils/interpolate.mjs';import{defaultOffset}from'../keyframes/offsets/default.mjs';import{convertOffsetToTimes}from'../keyframes/offsets/time.mjs';function defaultEasing(values,easing){return values.map(()=>easing||easeInOut).splice(0,values.length-1);}function keyframes(_ref){let{duration=300,keyframes:keyframeValues,times,ease=\"easeInOut\"}=_ref;/**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */const easingFunctions=isEasingArray(ease)?ease.map(easingDefinitionToFunction):easingDefinitionToFunction(ease);/**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */const state={done:false,value:keyframeValues[0]};/**\n     * Create a times array based on the provided 0-1 offsets\n     */const absoluteTimes=convertOffsetToTimes(// Only use the provided offsets if they're the correct length\n// TODO Maybe we should warn here if there's a length mismatch\ntimes&&times.length===keyframeValues.length?times:defaultOffset(keyframeValues),duration);const mapTimeToKeyframe=interpolate(absoluteTimes,keyframeValues,{ease:Array.isArray(easingFunctions)?easingFunctions:defaultEasing(keyframeValues,easingFunctions)});return{calculatedDuration:duration,next:t=>{state.value=mapTimeToKeyframe(t);state.done=t>=duration;return state;}};}export{defaultEasing,keyframes};","map":{"version":3,"names":["easeInOut","isEasingArray","easingDefinitionToFunction","interpolate","defaultOffset","convertOffsetToTimes","defaultEasing","values","easing","map","splice","length","keyframes","_ref","duration","keyframeValues","times","ease","easingFunctions","state","done","value","absoluteTimes","mapTimeToKeyframe","Array","isArray","calculatedDuration","next","t"],"sources":["/home/antisyn/portfolio/src/components/node_modules/motion-dom/dist/es/animation/generators/keyframes.mjs"],"sourcesContent":["import { easeInOut, isEasingArray, easingDefinitionToFunction } from 'motion-utils';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../keyframes/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../keyframes/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,aAAa,CAAEC,0BAA0B,KAAQ,cAAc,CACnF,OAASC,WAAW,KAAQ,6BAA6B,CACzD,OAASC,aAAa,KAAQ,kCAAkC,CAChE,OAASC,oBAAoB,KAAQ,+BAA+B,CAEpE,QAAS,CAAAC,aAAaA,CAACC,MAAM,CAAEC,MAAM,CAAE,CACnC,MAAO,CAAAD,MAAM,CAACE,GAAG,CAAC,IAAMD,MAAM,EAAIR,SAAS,CAAC,CAACU,MAAM,CAAC,CAAC,CAAEH,MAAM,CAACI,MAAM,CAAG,CAAC,CAAC,CAC7E,CACA,QAAS,CAAAC,SAASA,CAAAC,IAAA,CAA4E,IAA3E,CAAEC,QAAQ,CAAG,GAAG,CAAEF,SAAS,CAAEG,cAAc,CAAEC,KAAK,CAAEC,IAAI,CAAG,WAAa,CAAC,CAAAJ,IAAA,CACxF;AACJ;AACA;AACA,OACI,KAAM,CAAAK,eAAe,CAAGjB,aAAa,CAACgB,IAAI,CAAC,CACrCA,IAAI,CAACR,GAAG,CAACP,0BAA0B,CAAC,CACpCA,0BAA0B,CAACe,IAAI,CAAC,CACtC;AACJ;AACA;AACA,OACI,KAAM,CAAAE,KAAK,CAAG,CACVC,IAAI,CAAE,KAAK,CACXC,KAAK,CAAEN,cAAc,CAAC,CAAC,CAC3B,CAAC,CACD;AACJ;AACA,OACI,KAAM,CAAAO,aAAa,CAAGjB,oBAAoB,CAC1C;AACA;AACAW,KAAK,EAAIA,KAAK,CAACL,MAAM,GAAKI,cAAc,CAACJ,MAAM,CACzCK,KAAK,CACLZ,aAAa,CAACW,cAAc,CAAC,CAAED,QAAQ,CAAC,CAC9C,KAAM,CAAAS,iBAAiB,CAAGpB,WAAW,CAACmB,aAAa,CAAEP,cAAc,CAAE,CACjEE,IAAI,CAAEO,KAAK,CAACC,OAAO,CAACP,eAAe,CAAC,CAC9BA,eAAe,CACfZ,aAAa,CAACS,cAAc,CAAEG,eAAe,CACvD,CAAC,CAAC,CACF,MAAO,CACHQ,kBAAkB,CAAEZ,QAAQ,CAC5Ba,IAAI,CAAGC,CAAC,EAAK,CACTT,KAAK,CAACE,KAAK,CAAGE,iBAAiB,CAACK,CAAC,CAAC,CAClCT,KAAK,CAACC,IAAI,CAAGQ,CAAC,EAAId,QAAQ,CAC1B,MAAO,CAAAK,KAAK,CAChB,CACJ,CAAC,CACL,CAEA,OAASb,aAAa,CAAEM,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}