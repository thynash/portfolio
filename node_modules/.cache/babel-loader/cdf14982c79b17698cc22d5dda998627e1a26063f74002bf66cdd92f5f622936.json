{"ast":null,"code":"import{isHTMLElement}from'../../utils/is-html-element.mjs';import{isDragActive}from'../drag/state/is-active.mjs';import{isNodeOrChild}from'../utils/is-node-or-child.mjs';import{isPrimaryPointer}from'../utils/is-primary-pointer.mjs';import{setupGesture}from'../utils/setup.mjs';import{isElementKeyboardAccessible}from'./utils/is-keyboard-accessible.mjs';import{enableKeyboardPress}from'./utils/keyboard.mjs';import{isPressing}from'./utils/state.mjs';/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */function isValidPressEvent(event){return isPrimaryPointer(event)&&!isDragActive();}/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */function press(targetOrSelector,onPressStart){let options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const[targets,eventOptions,cancelEvents]=setupGesture(targetOrSelector,options);const startPress=startEvent=>{const target=startEvent.currentTarget;if(!isValidPressEvent(startEvent))return;isPressing.add(target);const onPressEnd=onPressStart(target,startEvent);const onPointerEnd=(endEvent,success)=>{window.removeEventListener(\"pointerup\",onPointerUp);window.removeEventListener(\"pointercancel\",onPointerCancel);if(isPressing.has(target)){isPressing.delete(target);}if(!isValidPressEvent(endEvent)){return;}if(typeof onPressEnd===\"function\"){onPressEnd(endEvent,{success});}};const onPointerUp=upEvent=>{onPointerEnd(upEvent,target===window||target===document||options.useGlobalTarget||isNodeOrChild(target,upEvent.target));};const onPointerCancel=cancelEvent=>{onPointerEnd(cancelEvent,false);};window.addEventListener(\"pointerup\",onPointerUp,eventOptions);window.addEventListener(\"pointercancel\",onPointerCancel,eventOptions);};targets.forEach(target=>{const pointerDownTarget=options.useGlobalTarget?window:target;pointerDownTarget.addEventListener(\"pointerdown\",startPress,eventOptions);if(isHTMLElement(target)){target.addEventListener(\"focus\",event=>enableKeyboardPress(event,eventOptions));if(!isElementKeyboardAccessible(target)&&!target.hasAttribute(\"tabindex\")){target.tabIndex=0;}}});return cancelEvents;}export{press};","map":{"version":3,"names":["isHTMLElement","isDragActive","isNodeOrChild","isPrimaryPointer","setupGesture","isElementKeyboardAccessible","enableKeyboardPress","isPressing","isValidPressEvent","event","press","targetOrSelector","onPressStart","options","arguments","length","undefined","targets","eventOptions","cancelEvents","startPress","startEvent","target","currentTarget","add","onPressEnd","onPointerEnd","endEvent","success","window","removeEventListener","onPointerUp","onPointerCancel","has","delete","upEvent","document","useGlobalTarget","cancelEvent","addEventListener","forEach","pointerDownTarget","hasAttribute","tabIndex"],"sources":["/home/antisyn/portfolio/src/components/node_modules/motion-dom/dist/es/gestures/press/index.mjs"],"sourcesContent":["import { isHTMLElement } from '../../utils/is-html-element.mjs';\nimport { isDragActive } from '../drag/state/is-active.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isPressing } from './utils/state.mjs';\n\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction isValidPressEvent(event) {\n    return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\nfunction press(targetOrSelector, onPressStart, options = {}) {\n    const [targets, eventOptions, cancelEvents] = setupGesture(targetOrSelector, options);\n    const startPress = (startEvent) => {\n        const target = startEvent.currentTarget;\n        if (!isValidPressEvent(startEvent))\n            return;\n        isPressing.add(target);\n        const onPressEnd = onPressStart(target, startEvent);\n        const onPointerEnd = (endEvent, success) => {\n            window.removeEventListener(\"pointerup\", onPointerUp);\n            window.removeEventListener(\"pointercancel\", onPointerCancel);\n            if (isPressing.has(target)) {\n                isPressing.delete(target);\n            }\n            if (!isValidPressEvent(endEvent)) {\n                return;\n            }\n            if (typeof onPressEnd === \"function\") {\n                onPressEnd(endEvent, { success });\n            }\n        };\n        const onPointerUp = (upEvent) => {\n            onPointerEnd(upEvent, target === window ||\n                target === document ||\n                options.useGlobalTarget ||\n                isNodeOrChild(target, upEvent.target));\n        };\n        const onPointerCancel = (cancelEvent) => {\n            onPointerEnd(cancelEvent, false);\n        };\n        window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n        window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n    };\n    targets.forEach((target) => {\n        const pointerDownTarget = options.useGlobalTarget ? window : target;\n        pointerDownTarget.addEventListener(\"pointerdown\", startPress, eventOptions);\n        if (isHTMLElement(target)) {\n            target.addEventListener(\"focus\", (event) => enableKeyboardPress(event, eventOptions));\n            if (!isElementKeyboardAccessible(target) &&\n                !target.hasAttribute(\"tabindex\")) {\n                target.tabIndex = 0;\n            }\n        }\n    });\n    return cancelEvents;\n}\n\nexport { press };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}