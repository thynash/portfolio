{"ast":null,"code":"import{motionValue}from'motion-dom';import{useContext,useState,useEffect}from'react';import{MotionConfigContext}from'../context/MotionConfigContext.mjs';import{useConstant}from'../utils/use-constant.mjs';/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */function useMotionValue(initial){const value=useConstant(()=>motionValue(initial));/**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */const{isStatic}=useContext(MotionConfigContext);if(isStatic){const[,setLatest]=useState(initial);useEffect(()=>value.on(\"change\",setLatest),[]);}return value;}export{useMotionValue};","map":{"version":3,"names":["motionValue","useContext","useState","useEffect","MotionConfigContext","useConstant","useMotionValue","initial","value","isStatic","setLatest","on"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/value/use-motion-value.mjs"],"sourcesContent":["import { motionValue } from 'motion-dom';\nimport { useContext, useState, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,YAAY,CACxC,OAASC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CACvD,OAASC,mBAAmB,KAAQ,oCAAoC,CACxE,OAASC,WAAW,KAAQ,2BAA2B,CAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,cAAcA,CAACC,OAAO,CAAE,CAC7B,KAAM,CAAAC,KAAK,CAAGH,WAAW,CAAC,IAAML,WAAW,CAACO,OAAO,CAAC,CAAC,CACrD;AACJ;AACA;AACA;AACA,OACI,KAAM,CAAEE,QAAS,CAAC,CAAGR,UAAU,CAACG,mBAAmB,CAAC,CACpD,GAAIK,QAAQ,CAAE,CACV,KAAM,EAAGC,SAAS,CAAC,CAAGR,QAAQ,CAACK,OAAO,CAAC,CACvCJ,SAAS,CAAC,IAAMK,KAAK,CAACG,EAAE,CAAC,QAAQ,CAAED,SAAS,CAAC,CAAE,EAAE,CAAC,CACtD,CACA,MAAO,CAAAF,KAAK,CAChB,CAEA,OAASF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}