{"ast":null,"code":"import{removeItem}from'motion-utils';import{microtask}from'../frameloop/microtask.mjs';import{startViewAnimation}from'./start.mjs';let builders=[];let current=null;function next(){current=null;const[nextBuilder]=builders;if(nextBuilder)start(nextBuilder);}function start(builder){removeItem(builders,builder);current=builder;startViewAnimation(builder).then(animation=>{builder.notifyReady(animation);animation.finished.finally(next);});}function processQueue(){var _builders$;/**\n     * Iterate backwards over the builders array. We can ignore the\n     * \"wait\" animations. If we have an interrupting animation in the\n     * queue then we need to batch all preceeding animations into it.\n     * Currently this only batches the update functions but will also\n     * need to batch the targets.\n     */for(let i=builders.length-1;i>=0;i--){const builder=builders[i];const{interrupt}=builder.options;if(interrupt===\"immediate\"){const batchedUpdates=builders.slice(0,i+1).map(b=>b.update);const remaining=builders.slice(i+1);builder.update=()=>{batchedUpdates.forEach(update=>update());};// Put the current builder at the front, followed by any \"wait\" builders\nbuilders=[builder,...remaining];break;}}if(!current||((_builders$=builders[0])===null||_builders$===void 0?void 0:_builders$.options.interrupt)===\"immediate\"){next();}}function addToQueue(builder){builders.push(builder);microtask.render(processQueue);}export{addToQueue};","map":{"version":3,"names":["removeItem","microtask","startViewAnimation","builders","current","next","nextBuilder","start","builder","then","animation","notifyReady","finished","finally","processQueue","_builders$","i","length","interrupt","options","batchedUpdates","slice","map","b","update","remaining","forEach","addToQueue","push","render"],"sources":["/home/antisyn/portfolio/src/components/node_modules/motion-dom/dist/es/view/queue.mjs"],"sourcesContent":["import { removeItem } from 'motion-utils';\nimport { microtask } from '../frameloop/microtask.mjs';\nimport { startViewAnimation } from './start.mjs';\n\nlet builders = [];\nlet current = null;\nfunction next() {\n    current = null;\n    const [nextBuilder] = builders;\n    if (nextBuilder)\n        start(nextBuilder);\n}\nfunction start(builder) {\n    removeItem(builders, builder);\n    current = builder;\n    startViewAnimation(builder).then((animation) => {\n        builder.notifyReady(animation);\n        animation.finished.finally(next);\n    });\n}\nfunction processQueue() {\n    /**\n     * Iterate backwards over the builders array. We can ignore the\n     * \"wait\" animations. If we have an interrupting animation in the\n     * queue then we need to batch all preceeding animations into it.\n     * Currently this only batches the update functions but will also\n     * need to batch the targets.\n     */\n    for (let i = builders.length - 1; i >= 0; i--) {\n        const builder = builders[i];\n        const { interrupt } = builder.options;\n        if (interrupt === \"immediate\") {\n            const batchedUpdates = builders.slice(0, i + 1).map((b) => b.update);\n            const remaining = builders.slice(i + 1);\n            builder.update = () => {\n                batchedUpdates.forEach((update) => update());\n            };\n            // Put the current builder at the front, followed by any \"wait\" builders\n            builders = [builder, ...remaining];\n            break;\n        }\n    }\n    if (!current || builders[0]?.options.interrupt === \"immediate\") {\n        next();\n    }\n}\nfunction addToQueue(builder) {\n    builders.push(builder);\n    microtask.render(processQueue);\n}\n\nexport { addToQueue };\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,cAAc,CACzC,OAASC,SAAS,KAAQ,4BAA4B,CACtD,OAASC,kBAAkB,KAAQ,aAAa,CAEhD,GAAI,CAAAC,QAAQ,CAAG,EAAE,CACjB,GAAI,CAAAC,OAAO,CAAG,IAAI,CAClB,QAAS,CAAAC,IAAIA,CAAA,CAAG,CACZD,OAAO,CAAG,IAAI,CACd,KAAM,CAACE,WAAW,CAAC,CAAGH,QAAQ,CAC9B,GAAIG,WAAW,CACXC,KAAK,CAACD,WAAW,CAAC,CAC1B,CACA,QAAS,CAAAC,KAAKA,CAACC,OAAO,CAAE,CACpBR,UAAU,CAACG,QAAQ,CAAEK,OAAO,CAAC,CAC7BJ,OAAO,CAAGI,OAAO,CACjBN,kBAAkB,CAACM,OAAO,CAAC,CAACC,IAAI,CAAEC,SAAS,EAAK,CAC5CF,OAAO,CAACG,WAAW,CAACD,SAAS,CAAC,CAC9BA,SAAS,CAACE,QAAQ,CAACC,OAAO,CAACR,IAAI,CAAC,CACpC,CAAC,CAAC,CACN,CACA,QAAS,CAAAS,YAAYA,CAAA,CAAG,KAAAC,UAAA,CACpB;AACJ;AACA;AACA;AACA;AACA;AACA,OACI,IAAK,GAAI,CAAAC,CAAC,CAAGb,QAAQ,CAACc,MAAM,CAAG,CAAC,CAAED,CAAC,EAAI,CAAC,CAAEA,CAAC,EAAE,CAAE,CAC3C,KAAM,CAAAR,OAAO,CAAGL,QAAQ,CAACa,CAAC,CAAC,CAC3B,KAAM,CAAEE,SAAU,CAAC,CAAGV,OAAO,CAACW,OAAO,CACrC,GAAID,SAAS,GAAK,WAAW,CAAE,CAC3B,KAAM,CAAAE,cAAc,CAAGjB,QAAQ,CAACkB,KAAK,CAAC,CAAC,CAAEL,CAAC,CAAG,CAAC,CAAC,CAACM,GAAG,CAAEC,CAAC,EAAKA,CAAC,CAACC,MAAM,CAAC,CACpE,KAAM,CAAAC,SAAS,CAAGtB,QAAQ,CAACkB,KAAK,CAACL,CAAC,CAAG,CAAC,CAAC,CACvCR,OAAO,CAACgB,MAAM,CAAG,IAAM,CACnBJ,cAAc,CAACM,OAAO,CAAEF,MAAM,EAAKA,MAAM,CAAC,CAAC,CAAC,CAChD,CAAC,CACD;AACArB,QAAQ,CAAG,CAACK,OAAO,CAAE,GAAGiB,SAAS,CAAC,CAClC,MACJ,CACJ,CACA,GAAI,CAACrB,OAAO,EAAI,EAAAW,UAAA,CAAAZ,QAAQ,CAAC,CAAC,CAAC,UAAAY,UAAA,iBAAXA,UAAA,CAAaI,OAAO,CAACD,SAAS,IAAK,WAAW,CAAE,CAC5Db,IAAI,CAAC,CAAC,CACV,CACJ,CACA,QAAS,CAAAsB,UAAUA,CAACnB,OAAO,CAAE,CACzBL,QAAQ,CAACyB,IAAI,CAACpB,OAAO,CAAC,CACtBP,SAAS,CAAC4B,MAAM,CAACf,YAAY,CAAC,CAClC,CAEA,OAASa,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}