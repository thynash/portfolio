{"ast":null,"code":"import{useCallback}from'react';import{isRefObject}from'../../utils/is-ref-object.mjs';/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */function useMotionRef(visualState,visualElement,externalRef){return useCallback(instance=>{if(instance){visualState.onMount&&visualState.onMount(instance);}if(visualElement){if(instance){visualElement.mount(instance);}else{visualElement.unmount();}}if(externalRef){if(typeof externalRef===\"function\"){externalRef(instance);}else if(isRefObject(externalRef)){externalRef.current=instance;}}},/**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */[visualElement]);}export{useMotionRef};","map":{"version":3,"names":["useCallback","isRefObject","useMotionRef","visualState","visualElement","externalRef","instance","onMount","mount","unmount","current"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs"],"sourcesContent":["import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        if (instance) {\n            visualState.onMount && visualState.onMount(instance);\n        }\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            }\n            else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,OAAO,CACnC,OAASC,WAAW,KAAQ,+BAA+B,CAE3D;AACA;AACA;AACA,GACA,QAAS,CAAAC,YAAYA,CAACC,WAAW,CAAEC,aAAa,CAAEC,WAAW,CAAE,CAC3D,MAAO,CAAAL,WAAW,CAAEM,QAAQ,EAAK,CAC7B,GAAIA,QAAQ,CAAE,CACVH,WAAW,CAACI,OAAO,EAAIJ,WAAW,CAACI,OAAO,CAACD,QAAQ,CAAC,CACxD,CACA,GAAIF,aAAa,CAAE,CACf,GAAIE,QAAQ,CAAE,CACVF,aAAa,CAACI,KAAK,CAACF,QAAQ,CAAC,CACjC,CAAC,IACI,CACDF,aAAa,CAACK,OAAO,CAAC,CAAC,CAC3B,CACJ,CACA,GAAIJ,WAAW,CAAE,CACb,GAAI,MAAO,CAAAA,WAAW,GAAK,UAAU,CAAE,CACnCA,WAAW,CAACC,QAAQ,CAAC,CACzB,CAAC,IACI,IAAIL,WAAW,CAACI,WAAW,CAAC,CAAE,CAC/BA,WAAW,CAACK,OAAO,CAAGJ,QAAQ,CAClC,CACJ,CACJ,CAAC,CACD;AACJ;AACA;AACA;AACA,OACI,CAACF,aAAa,CAAC,CAAC,CACpB,CAEA,OAASF,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}