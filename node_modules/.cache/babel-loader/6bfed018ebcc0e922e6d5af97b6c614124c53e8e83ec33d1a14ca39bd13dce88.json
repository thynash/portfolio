{"ast":null,"code":"import _objectSpread from\"/home/antisyn/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{secondsToMilliseconds}from'motion-utils';import{GroupAnimation}from'../animation/GroupAnimation.mjs';import{NativeAnimation}from'../animation/NativeAnimation.mjs';import{NativeAnimationWrapper}from'../animation/NativeAnimationWrapper.mjs';import{getValueTransition}from'../animation/utils/get-value-transition.mjs';import{mapEasingToNativeEasing}from'../animation/waapi/easing/map-easing.mjs';import{applyGeneratorOptions}from'../animation/waapi/utils/apply-generator.mjs';import{chooseLayerType}from'./utils/choose-layer-type.mjs';import{css}from'./utils/css.mjs';import{getLayerName}from'./utils/get-layer-name.mjs';import{getViewAnimations}from'./utils/get-view-animations.mjs';import{hasTarget}from'./utils/has-target.mjs';const definitionNames=[\"layout\",\"enter\",\"exit\",\"new\",\"old\"];function startViewAnimation(builder){const{update,targets,options:defaultOptions}=builder;if(!document.startViewTransition){return new Promise(async resolve=>{await update();resolve(new GroupAnimation([]));});}// TODO: Go over existing targets and ensure they all have ids\n/**\n     * If we don't have any animations defined for the root target,\n     * remove it from being captured.\n     */if(!hasTarget(\"root\",targets)){css.set(\":root\",{\"view-transition-name\":\"none\"});}/**\n     * Set the timing curve to linear for all view transition layers.\n     * This gets baked into the keyframes, which can't be changed\n     * without breaking the generated animation.\n     *\n     * This allows us to set easing via updateTiming - which can be changed.\n     */css.set(\"::view-transition-group(*), ::view-transition-old(*), ::view-transition-new(*)\",{\"animation-timing-function\":\"linear !important\"});css.commit();// Write\nconst transition=document.startViewTransition(async()=>{await update();// TODO: Go over new targets and ensure they all have ids\n});transition.finished.finally(()=>{css.remove();// Write\n});return new Promise(resolve=>{transition.ready.then(()=>{const generatedViewAnimations=getViewAnimations();const animations=[];/**\n             * Create animations for each of our explicitly-defined subjects.\n             */targets.forEach((definition,target)=>{// TODO: If target is not \"root\", resolve elements\n// and iterate over each\nfor(const key of definitionNames){if(!definition[key])continue;const{keyframes,options}=definition[key];for(let[valueName,valueKeyframes]of Object.entries(keyframes)){if(!valueKeyframes)continue;const valueOptions=_objectSpread(_objectSpread({},getValueTransition(defaultOptions,valueName)),getValueTransition(options,valueName));const type=chooseLayerType(key);/**\n                         * If this is an opacity animation, and keyframes are not an array,\n                         * we need to convert them into an array and set an initial value.\n                         */if(valueName===\"opacity\"&&!Array.isArray(valueKeyframes)){const initialValue=type===\"new\"?0:1;valueKeyframes=[initialValue,valueKeyframes];}/**\n                         * Resolve stagger function if provided.\n                         */if(typeof valueOptions.delay===\"function\"){valueOptions.delay=valueOptions.delay(0,1);}valueOptions.duration&&(valueOptions.duration=secondsToMilliseconds(valueOptions.duration));valueOptions.delay&&(valueOptions.delay=secondsToMilliseconds(valueOptions.delay));const animation=new NativeAnimation(_objectSpread(_objectSpread({},valueOptions),{},{element:document.documentElement,name:valueName,pseudoElement:\"::view-transition-\".concat(type,\"(\").concat(target,\")\"),keyframes:valueKeyframes}));animations.push(animation);}}});/**\n             * Handle browser generated animations\n             */for(const animation of generatedViewAnimations){if(animation.playState===\"finished\")continue;const{effect}=animation;if(!effect||!(effect instanceof KeyframeEffect))continue;const{pseudoElement}=effect;if(!pseudoElement)continue;const name=getLayerName(pseudoElement);if(!name)continue;const targetDefinition=targets.get(name.layer);if(!targetDefinition){var _animationTransition$;/**\n                     * If transition name is group then update the timing of the animation\n                     * whereas if it's old or new then we could possibly replace it using\n                     * the above method.\n                     */const transitionName=name.type===\"group\"?\"layout\":\"\";let animationTransition=_objectSpread({},getValueTransition(defaultOptions,transitionName));animationTransition.duration&&(animationTransition.duration=secondsToMilliseconds(animationTransition.duration));animationTransition=applyGeneratorOptions(animationTransition);const easing=mapEasingToNativeEasing(animationTransition.ease,animationTransition.duration);effect.updateTiming({delay:secondsToMilliseconds((_animationTransition$=animationTransition.delay)!==null&&_animationTransition$!==void 0?_animationTransition$:0),duration:animationTransition.duration,easing});animations.push(new NativeAnimationWrapper(animation));}else if(hasOpacity(targetDefinition,\"enter\")&&hasOpacity(targetDefinition,\"exit\")&&effect.getKeyframes().some(keyframe=>keyframe.mixBlendMode)){animations.push(new NativeAnimationWrapper(animation));}else{animation.cancel();}}resolve(new GroupAnimation(animations));});});}function hasOpacity(target,key){var _target$key;return target===null||target===void 0?void 0:(_target$key=target[key])===null||_target$key===void 0?void 0:_target$key.keyframes.opacity;}export{startViewAnimation};","map":{"version":3,"names":["secondsToMilliseconds","GroupAnimation","NativeAnimation","NativeAnimationWrapper","getValueTransition","mapEasingToNativeEasing","applyGeneratorOptions","chooseLayerType","css","getLayerName","getViewAnimations","hasTarget","definitionNames","startViewAnimation","builder","update","targets","options","defaultOptions","document","startViewTransition","Promise","resolve","set","commit","transition","finished","finally","remove","ready","then","generatedViewAnimations","animations","forEach","definition","target","key","keyframes","valueName","valueKeyframes","Object","entries","valueOptions","_objectSpread","type","Array","isArray","initialValue","delay","duration","animation","element","documentElement","name","pseudoElement","concat","push","playState","effect","KeyframeEffect","targetDefinition","get","layer","_animationTransition$","transitionName","animationTransition","easing","ease","updateTiming","hasOpacity","getKeyframes","some","keyframe","mixBlendMode","cancel","_target$key","opacity"],"sources":["/home/antisyn/portfolio/src/components/node_modules/motion-dom/dist/es/view/start.mjs"],"sourcesContent":["import { secondsToMilliseconds } from 'motion-utils';\nimport { GroupAnimation } from '../animation/GroupAnimation.mjs';\nimport { NativeAnimation } from '../animation/NativeAnimation.mjs';\nimport { NativeAnimationWrapper } from '../animation/NativeAnimationWrapper.mjs';\nimport { getValueTransition } from '../animation/utils/get-value-transition.mjs';\nimport { mapEasingToNativeEasing } from '../animation/waapi/easing/map-easing.mjs';\nimport { applyGeneratorOptions } from '../animation/waapi/utils/apply-generator.mjs';\nimport { chooseLayerType } from './utils/choose-layer-type.mjs';\nimport { css } from './utils/css.mjs';\nimport { getLayerName } from './utils/get-layer-name.mjs';\nimport { getViewAnimations } from './utils/get-view-animations.mjs';\nimport { hasTarget } from './utils/has-target.mjs';\n\nconst definitionNames = [\"layout\", \"enter\", \"exit\", \"new\", \"old\"];\nfunction startViewAnimation(builder) {\n    const { update, targets, options: defaultOptions } = builder;\n    if (!document.startViewTransition) {\n        return new Promise(async (resolve) => {\n            await update();\n            resolve(new GroupAnimation([]));\n        });\n    }\n    // TODO: Go over existing targets and ensure they all have ids\n    /**\n     * If we don't have any animations defined for the root target,\n     * remove it from being captured.\n     */\n    if (!hasTarget(\"root\", targets)) {\n        css.set(\":root\", {\n            \"view-transition-name\": \"none\",\n        });\n    }\n    /**\n     * Set the timing curve to linear for all view transition layers.\n     * This gets baked into the keyframes, which can't be changed\n     * without breaking the generated animation.\n     *\n     * This allows us to set easing via updateTiming - which can be changed.\n     */\n    css.set(\"::view-transition-group(*), ::view-transition-old(*), ::view-transition-new(*)\", { \"animation-timing-function\": \"linear !important\" });\n    css.commit(); // Write\n    const transition = document.startViewTransition(async () => {\n        await update();\n        // TODO: Go over new targets and ensure they all have ids\n    });\n    transition.finished.finally(() => {\n        css.remove(); // Write\n    });\n    return new Promise((resolve) => {\n        transition.ready.then(() => {\n            const generatedViewAnimations = getViewAnimations();\n            const animations = [];\n            /**\n             * Create animations for each of our explicitly-defined subjects.\n             */\n            targets.forEach((definition, target) => {\n                // TODO: If target is not \"root\", resolve elements\n                // and iterate over each\n                for (const key of definitionNames) {\n                    if (!definition[key])\n                        continue;\n                    const { keyframes, options } = definition[key];\n                    for (let [valueName, valueKeyframes] of Object.entries(keyframes)) {\n                        if (!valueKeyframes)\n                            continue;\n                        const valueOptions = {\n                            ...getValueTransition(defaultOptions, valueName),\n                            ...getValueTransition(options, valueName),\n                        };\n                        const type = chooseLayerType(key);\n                        /**\n                         * If this is an opacity animation, and keyframes are not an array,\n                         * we need to convert them into an array and set an initial value.\n                         */\n                        if (valueName === \"opacity\" &&\n                            !Array.isArray(valueKeyframes)) {\n                            const initialValue = type === \"new\" ? 0 : 1;\n                            valueKeyframes = [initialValue, valueKeyframes];\n                        }\n                        /**\n                         * Resolve stagger function if provided.\n                         */\n                        if (typeof valueOptions.delay === \"function\") {\n                            valueOptions.delay = valueOptions.delay(0, 1);\n                        }\n                        valueOptions.duration && (valueOptions.duration = secondsToMilliseconds(valueOptions.duration));\n                        valueOptions.delay && (valueOptions.delay = secondsToMilliseconds(valueOptions.delay));\n                        const animation = new NativeAnimation({\n                            ...valueOptions,\n                            element: document.documentElement,\n                            name: valueName,\n                            pseudoElement: `::view-transition-${type}(${target})`,\n                            keyframes: valueKeyframes,\n                        });\n                        animations.push(animation);\n                    }\n                }\n            });\n            /**\n             * Handle browser generated animations\n             */\n            for (const animation of generatedViewAnimations) {\n                if (animation.playState === \"finished\")\n                    continue;\n                const { effect } = animation;\n                if (!effect || !(effect instanceof KeyframeEffect))\n                    continue;\n                const { pseudoElement } = effect;\n                if (!pseudoElement)\n                    continue;\n                const name = getLayerName(pseudoElement);\n                if (!name)\n                    continue;\n                const targetDefinition = targets.get(name.layer);\n                if (!targetDefinition) {\n                    /**\n                     * If transition name is group then update the timing of the animation\n                     * whereas if it's old or new then we could possibly replace it using\n                     * the above method.\n                     */\n                    const transitionName = name.type === \"group\" ? \"layout\" : \"\";\n                    let animationTransition = {\n                        ...getValueTransition(defaultOptions, transitionName),\n                    };\n                    animationTransition.duration && (animationTransition.duration = secondsToMilliseconds(animationTransition.duration));\n                    animationTransition =\n                        applyGeneratorOptions(animationTransition);\n                    const easing = mapEasingToNativeEasing(animationTransition.ease, animationTransition.duration);\n                    effect.updateTiming({\n                        delay: secondsToMilliseconds(animationTransition.delay ?? 0),\n                        duration: animationTransition.duration,\n                        easing,\n                    });\n                    animations.push(new NativeAnimationWrapper(animation));\n                }\n                else if (hasOpacity(targetDefinition, \"enter\") &&\n                    hasOpacity(targetDefinition, \"exit\") &&\n                    effect\n                        .getKeyframes()\n                        .some((keyframe) => keyframe.mixBlendMode)) {\n                    animations.push(new NativeAnimationWrapper(animation));\n                }\n                else {\n                    animation.cancel();\n                }\n            }\n            resolve(new GroupAnimation(animations));\n        });\n    });\n}\nfunction hasOpacity(target, key) {\n    return target?.[key]?.keyframes.opacity;\n}\n\nexport { startViewAnimation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}