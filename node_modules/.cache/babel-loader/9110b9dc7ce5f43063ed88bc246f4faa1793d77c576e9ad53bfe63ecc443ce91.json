{"ast":null,"code":"import{transformPropOrder,getValueAsType,numberValueTypes}from'motion-dom';const translateAlias={x:\"translateX\",y:\"translateY\",z:\"translateZ\",transformPerspective:\"perspective\"};const numTransforms=transformPropOrder.length;/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */function buildTransform(latestValues,transform,transformTemplate){// The transform string we're going to build into.\nlet transformString=\"\";let transformIsDefault=true;/**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */for(let i=0;i<numTransforms;i++){const key=transformPropOrder[i];const value=latestValues[key];if(value===undefined)continue;let valueIsDefault=true;if(typeof value===\"number\"){valueIsDefault=value===(key.startsWith(\"scale\")?1:0);}else{valueIsDefault=parseFloat(value)===0;}if(!valueIsDefault||transformTemplate){const valueAsType=getValueAsType(value,numberValueTypes[key]);if(!valueIsDefault){transformIsDefault=false;const transformName=translateAlias[key]||key;transformString+=\"\".concat(transformName,\"(\").concat(valueAsType,\") \");}if(transformTemplate){transform[key]=valueAsType;}}}transformString=transformString.trim();// If we have a custom `transform` template, pass our transform values and\n// generated transformString to that before returning\nif(transformTemplate){transformString=transformTemplate(transform,transformIsDefault?\"\":transformString);}else if(transformIsDefault){transformString=\"none\";}return transformString;}export{buildTransform};","map":{"version":3,"names":["transformPropOrder","getValueAsType","numberValueTypes","translateAlias","x","y","z","transformPerspective","numTransforms","length","buildTransform","latestValues","transform","transformTemplate","transformString","transformIsDefault","i","key","value","undefined","valueIsDefault","startsWith","parseFloat","valueAsType","transformName","concat","trim"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder, getValueAsType, numberValueTypes } from 'motion-dom';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"mappings":"AAAA,OAASA,kBAAkB,CAAEC,cAAc,CAAEC,gBAAgB,KAAQ,YAAY,CAEjF,KAAM,CAAAC,cAAc,CAAG,CACnBC,CAAC,CAAE,YAAY,CACfC,CAAC,CAAE,YAAY,CACfC,CAAC,CAAE,YAAY,CACfC,oBAAoB,CAAE,aAC1B,CAAC,CACD,KAAM,CAAAC,aAAa,CAAGR,kBAAkB,CAACS,MAAM,CAC/C;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,cAAcA,CAACC,YAAY,CAAEC,SAAS,CAAEC,iBAAiB,CAAE,CAChE;AACA,GAAI,CAAAC,eAAe,CAAG,EAAE,CACxB,GAAI,CAAAC,kBAAkB,CAAG,IAAI,CAC7B;AACJ;AACA;AACA,OACI,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGR,aAAa,CAAEQ,CAAC,EAAE,CAAE,CACpC,KAAM,CAAAC,GAAG,CAAGjB,kBAAkB,CAACgB,CAAC,CAAC,CACjC,KAAM,CAAAE,KAAK,CAAGP,YAAY,CAACM,GAAG,CAAC,CAC/B,GAAIC,KAAK,GAAKC,SAAS,CACnB,SACJ,GAAI,CAAAC,cAAc,CAAG,IAAI,CACzB,GAAI,MAAO,CAAAF,KAAK,GAAK,QAAQ,CAAE,CAC3BE,cAAc,CAAGF,KAAK,IAAMD,GAAG,CAACI,UAAU,CAAC,OAAO,CAAC,CAAG,CAAC,CAAG,CAAC,CAAC,CAChE,CAAC,IACI,CACDD,cAAc,CAAGE,UAAU,CAACJ,KAAK,CAAC,GAAK,CAAC,CAC5C,CACA,GAAI,CAACE,cAAc,EAAIP,iBAAiB,CAAE,CACtC,KAAM,CAAAU,WAAW,CAAGtB,cAAc,CAACiB,KAAK,CAAEhB,gBAAgB,CAACe,GAAG,CAAC,CAAC,CAChE,GAAI,CAACG,cAAc,CAAE,CACjBL,kBAAkB,CAAG,KAAK,CAC1B,KAAM,CAAAS,aAAa,CAAGrB,cAAc,CAACc,GAAG,CAAC,EAAIA,GAAG,CAChDH,eAAe,KAAAW,MAAA,CAAOD,aAAa,MAAAC,MAAA,CAAIF,WAAW,MAAI,CAC1D,CACA,GAAIV,iBAAiB,CAAE,CACnBD,SAAS,CAACK,GAAG,CAAC,CAAGM,WAAW,CAChC,CACJ,CACJ,CACAT,eAAe,CAAGA,eAAe,CAACY,IAAI,CAAC,CAAC,CACxC;AACA;AACA,GAAIb,iBAAiB,CAAE,CACnBC,eAAe,CAAGD,iBAAiB,CAACD,SAAS,CAAEG,kBAAkB,CAAG,EAAE,CAAGD,eAAe,CAAC,CAC7F,CAAC,IACI,IAAIC,kBAAkB,CAAE,CACzBD,eAAe,CAAG,MAAM,CAC5B,CACA,MAAO,CAAAA,eAAe,CAC1B,CAEA,OAASJ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}