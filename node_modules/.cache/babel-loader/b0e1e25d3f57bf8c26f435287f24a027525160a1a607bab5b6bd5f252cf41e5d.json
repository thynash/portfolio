{"ast":null,"code":"import _objectSpread from\"/home/antisyn/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{statsBuffer,isSVGElement,isSVGSVGElement,getValueTransition,cancelFrame,time,frameData,frameSteps,microtask,frame,activeAnimations,motionValue,mixNumber}from'motion-dom';import{SubscriptionManager,clamp,noop}from'motion-utils';import{animateSingleValue}from'../../animation/animate/single-value.mjs';import{getOptimisedAppearId}from'../../animation/optimized-appear/get-appear-id.mjs';import{FlatTree}from'../../render/utils/flat-tree.mjs';import{delay}from'../../utils/delay.mjs';import{resolveMotionValue}from'../../value/utils/resolve-motion-value.mjs';import{mixValues}from'../animation/mix-values.mjs';import{copyBoxInto,copyAxisDeltaInto}from'../geometry/copy.mjs';import{translateAxis,transformBox,applyBoxDelta,applyTreeDeltas}from'../geometry/delta-apply.mjs';import{calcLength,calcRelativePosition,calcRelativeBox,calcBoxDelta,isNear}from'../geometry/delta-calc.mjs';import{removeBoxTransforms}from'../geometry/delta-remove.mjs';import{createBox,createDelta}from'../geometry/models.mjs';import{boxEqualsRounded,isDeltaZero,axisDeltaEquals,aspectRatio,boxEquals}from'../geometry/utils.mjs';import{NodeStack}from'../shared/stack.mjs';import{scaleCorrectors}from'../styles/scale-correction.mjs';import{buildProjectionTransform}from'../styles/transform.mjs';import{eachAxis}from'../utils/each-axis.mjs';import{hasTransform,hasScale,has2DTranslate}from'../utils/has-transform.mjs';import{globalProjectionState}from'./state.mjs';const metrics={nodes:0,calculatedTargetDeltas:0,calculatedProjections:0};const transformAxes=[\"\",\"X\",\"Y\",\"Z\"];const hiddenVisibility={visibility:\"hidden\"};/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */const animationTarget=1000;let id=0;function resetDistortingTransform(key,visualElement,values,sharedAnimationValues){const{latestValues}=visualElement;// Record the distorting transform and then temporarily set it to 0\nif(latestValues[key]){values[key]=latestValues[key];visualElement.setStaticValue(key,0);if(sharedAnimationValues){sharedAnimationValues[key]=0;}}}function cancelTreeOptimisedTransformAnimations(projectionNode){projectionNode.hasCheckedOptimisedAppear=true;if(projectionNode.root===projectionNode)return;const{visualElement}=projectionNode.options;if(!visualElement)return;const appearId=getOptimisedAppearId(visualElement);if(window.MotionHasOptimisedAnimation(appearId,\"transform\")){const{layout,layoutId}=projectionNode.options;window.MotionCancelOptimisedAnimation(appearId,\"transform\",frame,!(layout||layoutId));}const{parent}=projectionNode;if(parent&&!parent.hasCheckedOptimisedAppear){cancelTreeOptimisedTransformAnimations(parent);}}function createProjectionNode(_ref){let{attachResizeListener,defaultParent,measureScroll,checkIsScrollRoot,resetTransform}=_ref;return class ProjectionNode{constructor(){let latestValues=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let parent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultParent===null||defaultParent===void 0?void 0:defaultParent();/**\n             * A unique ID generated for every projection node.\n             */this.id=id++;/**\n             * An id that represents a unique session instigated by startUpdate.\n             */this.animationId=0;/**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */this.children=new Set();/**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */this.options={};/**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */this.isTreeAnimating=false;this.isAnimationBlocked=false;/**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */this.isLayoutDirty=false;/**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */this.isProjectionDirty=false;/**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */this.isSharedProjectionDirty=false;/**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */this.isTransformDirty=false;/**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */this.updateManuallyBlocked=false;this.updateBlockedByResize=false;/**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */this.isUpdating=false;/**\n             * If this is an SVG element we currently disable projection transforms\n             */this.isSVG=false;/**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */this.needsReset=false;/**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */this.shouldResetTransform=false;/**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */this.hasCheckedOptimisedAppear=false;/**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */this.treeScale={x:1,y:1};/**\n             *\n             */this.eventHandlers=new Map();this.hasTreeAnimated=false;// Note: Currently only running on root node\nthis.updateScheduled=false;this.scheduleUpdate=()=>this.update();this.projectionUpdateScheduled=false;this.checkUpdateFailed=()=>{if(this.isUpdating){this.isUpdating=false;this.clearAllSnapshots();}};/**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */this.updateProjection=()=>{this.projectionUpdateScheduled=false;/**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */if(statsBuffer.value){metrics.nodes=metrics.calculatedTargetDeltas=metrics.calculatedProjections=0;}this.nodes.forEach(propagateDirtyNodes);this.nodes.forEach(resolveTargetDelta);this.nodes.forEach(calcProjection);this.nodes.forEach(cleanDirtyNodes);if(statsBuffer.addProjectionMetrics){statsBuffer.addProjectionMetrics(metrics);}};/**\n             * Frame calculations\n             */this.resolvedRelativeTargetAt=0.0;this.hasProjected=false;this.isVisible=true;this.animationProgress=0;/**\n             * Shared layout\n             */// TODO Only running on root node\nthis.sharedNodes=new Map();this.latestValues=latestValues;this.root=parent?parent.root||parent:this;this.path=parent?[...parent.path,parent]:[];this.parent=parent;this.depth=parent?parent.depth+1:0;for(let i=0;i<this.path.length;i++){this.path[i].shouldResetTransform=true;}if(this.root===this)this.nodes=new FlatTree();}addEventListener(name,handler){if(!this.eventHandlers.has(name)){this.eventHandlers.set(name,new SubscriptionManager());}return this.eventHandlers.get(name).add(handler);}notifyListeners(name){const subscriptionManager=this.eventHandlers.get(name);for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}subscriptionManager&&subscriptionManager.notify(...args);}hasListeners(name){return this.eventHandlers.has(name);}/**\n         * Lifecycles\n         */mount(instance){if(this.instance)return;this.isSVG=isSVGElement(instance)&&!isSVGSVGElement(instance);this.instance=instance;const{layoutId,layout,visualElement}=this.options;if(visualElement&&!visualElement.current){visualElement.mount(instance);}this.root.nodes.add(this);this.parent&&this.parent.children.add(this);if(this.root.hasTreeAnimated&&(layout||layoutId)){this.isLayoutDirty=true;}if(attachResizeListener){let cancelDelay;const resizeUnblockUpdate=()=>this.root.updateBlockedByResize=false;attachResizeListener(instance,()=>{this.root.updateBlockedByResize=true;cancelDelay&&cancelDelay();cancelDelay=delay(resizeUnblockUpdate,250);if(globalProjectionState.hasAnimatedSinceResize){globalProjectionState.hasAnimatedSinceResize=false;this.nodes.forEach(finishAnimation);}});}if(layoutId){this.root.registerSharedNode(layoutId,this);}// Only register the handler if it requires layout animation\nif(this.options.animate!==false&&visualElement&&(layoutId||layout)){this.addEventListener(\"didUpdate\",_ref2=>{let{delta,hasLayoutChanged,hasRelativeLayoutChanged,layout:newLayout}=_ref2;if(this.isTreeAnimationBlocked()){this.target=undefined;this.relativeTarget=undefined;return;}// TODO: Check here if an animation exists\nconst layoutTransition=this.options.transition||visualElement.getDefaultTransition()||defaultLayoutTransition;const{onLayoutAnimationStart,onLayoutAnimationComplete}=visualElement.getProps();/**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */const hasTargetChanged=!this.targetLayout||!boxEqualsRounded(this.targetLayout,newLayout);/*\n                     * Note: Disabled to fix relative animations always triggering new\n                     * layout animations. If this causes further issues, we can try\n                     * a different approach to detecting relative target changes.\n                     */// || hasRelativeLayoutChanged\n/**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */const hasOnlyRelativeTargetChanged=!hasLayoutChanged&&hasRelativeLayoutChanged;if(this.options.layoutRoot||this.resumeFrom||hasOnlyRelativeTargetChanged||hasLayoutChanged&&(hasTargetChanged||!this.currentAnimation)){if(this.resumeFrom){this.resumingFrom=this.resumeFrom;this.resumingFrom.resumingFrom=undefined;}const animationOptions=_objectSpread(_objectSpread({},getValueTransition(layoutTransition,\"layout\")),{},{onPlay:onLayoutAnimationStart,onComplete:onLayoutAnimationComplete});if(visualElement.shouldReduceMotion||this.options.layoutRoot){animationOptions.delay=0;animationOptions.type=false;}this.startAnimation(animationOptions);/**\n                         * Set animation origin after starting animation to avoid layout jump\n                         * caused by stopping previous layout animation\n                         */this.setAnimationOrigin(delta,hasOnlyRelativeTargetChanged);}else{/**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */if(!hasLayoutChanged){finishAnimation(this);}if(this.isLead()&&this.options.onExitComplete){this.options.onExitComplete();}}this.targetLayout=newLayout;});}}unmount(){this.options.layoutId&&this.willUpdate();this.root.nodes.remove(this);const stack=this.getStack();stack&&stack.remove(this);this.parent&&this.parent.children.delete(this);this.instance=undefined;this.eventHandlers.clear();cancelFrame(this.updateProjection);}// only on the root\nblockUpdate(){this.updateManuallyBlocked=true;}unblockUpdate(){this.updateManuallyBlocked=false;}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize;}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||false;}// Note: currently only running on root node\nstartUpdate(){if(this.isUpdateBlocked())return;this.isUpdating=true;this.nodes&&this.nodes.forEach(resetSkewAndRotation);this.animationId++;}getTransformTemplate(){const{visualElement}=this.options;return visualElement&&visualElement.getProps().transformTemplate;}willUpdate(){let shouldNotifyListeners=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;this.root.hasTreeAnimated=true;if(this.root.isUpdateBlocked()){this.options.onExitComplete&&this.options.onExitComplete();return;}/**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */if(window.MotionCancelOptimisedAnimation&&!this.hasCheckedOptimisedAppear){cancelTreeOptimisedTransformAnimations(this);}!this.root.isUpdating&&this.root.startUpdate();if(this.isLayoutDirty)return;this.isLayoutDirty=true;for(let i=0;i<this.path.length;i++){const node=this.path[i];node.shouldResetTransform=true;node.updateScroll(\"snapshot\");if(node.options.layoutRoot){node.willUpdate(false);}}const{layoutId,layout}=this.options;if(layoutId===undefined&&!layout)return;const transformTemplate=this.getTransformTemplate();this.prevTransformTemplateValue=transformTemplate?transformTemplate(this.latestValues,\"\"):undefined;this.updateSnapshot();shouldNotifyListeners&&this.notifyListeners(\"willUpdate\");}update(){this.updateScheduled=false;const updateWasBlocked=this.isUpdateBlocked();// When doing an instant transition, we skip the layout update,\n// but should still clean up the measurements so that the next\n// snapshot could be taken correctly.\nif(updateWasBlocked){this.unblockUpdate();this.clearAllSnapshots();this.nodes.forEach(clearMeasurements);return;}if(!this.isUpdating){this.nodes.forEach(clearIsLayoutDirty);}this.isUpdating=false;/**\n             * Write\n             */this.nodes.forEach(resetTransformStyle);/**\n             * Read ==================\n             */// Update layout measurements of updated children\nthis.nodes.forEach(updateLayout);/**\n             * Write\n             */// Notify listeners that the layout is updated\nthis.nodes.forEach(notifyLayoutUpdate);this.clearAllSnapshots();/**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */const now=time.now();frameData.delta=clamp(0,1000/60,now-frameData.timestamp);frameData.timestamp=now;frameData.isProcessing=true;frameSteps.update.process(frameData);frameSteps.preRender.process(frameData);frameSteps.render.process(frameData);frameData.isProcessing=false;}didUpdate(){if(!this.updateScheduled){this.updateScheduled=true;microtask.read(this.scheduleUpdate);}}clearAllSnapshots(){this.nodes.forEach(clearSnapshot);this.sharedNodes.forEach(removeLeadSnapshots);}scheduleUpdateProjection(){if(!this.projectionUpdateScheduled){this.projectionUpdateScheduled=true;frame.preRender(this.updateProjection,false,true);}}scheduleCheckAfterUnmount(){/**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */frame.postRender(()=>{if(this.isLayoutDirty){this.root.didUpdate();}else{this.root.checkUpdateFailed();}});}/**\n         * Update measurements\n         */updateSnapshot(){if(this.snapshot||!this.instance)return;this.snapshot=this.measure();if(this.snapshot&&!calcLength(this.snapshot.measuredBox.x)&&!calcLength(this.snapshot.measuredBox.y)){this.snapshot=undefined;}}updateLayout(){if(!this.instance)return;// TODO: Incorporate into a forwarded scroll offset\nthis.updateScroll();if(!(this.options.alwaysMeasureLayout&&this.isLead())&&!this.isLayoutDirty){return;}/**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */if(this.resumeFrom&&!this.resumeFrom.instance){for(let i=0;i<this.path.length;i++){const node=this.path[i];node.updateScroll();}}const prevLayout=this.layout;this.layout=this.measure(false);this.layoutCorrected=createBox();this.isLayoutDirty=false;this.projectionDelta=undefined;this.notifyListeners(\"measure\",this.layout.layoutBox);const{visualElement}=this.options;visualElement&&visualElement.notify(\"LayoutMeasure\",this.layout.layoutBox,prevLayout?prevLayout.layoutBox:undefined);}updateScroll(){let phase=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"measure\";let needsMeasurement=Boolean(this.options.layoutScroll&&this.instance);if(this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===phase){needsMeasurement=false;}if(needsMeasurement&&this.instance){const isRoot=checkIsScrollRoot(this.instance);this.scroll={animationId:this.root.animationId,phase,isRoot,offset:measureScroll(this.instance),wasRoot:this.scroll?this.scroll.isRoot:isRoot};}}resetTransform(){if(!resetTransform)return;const isResetRequested=this.isLayoutDirty||this.shouldResetTransform||this.options.alwaysMeasureLayout;const hasProjection=this.projectionDelta&&!isDeltaZero(this.projectionDelta);const transformTemplate=this.getTransformTemplate();const transformTemplateValue=transformTemplate?transformTemplate(this.latestValues,\"\"):undefined;const transformTemplateHasChanged=transformTemplateValue!==this.prevTransformTemplateValue;if(isResetRequested&&this.instance&&(hasProjection||hasTransform(this.latestValues)||transformTemplateHasChanged)){resetTransform(this.instance,transformTemplateValue);this.shouldResetTransform=false;this.scheduleRender();}}measure(){let removeTransform=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;const pageBox=this.measurePageBox();let layoutBox=this.removeElementScroll(pageBox);/**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */if(removeTransform){layoutBox=this.removeTransform(layoutBox);}roundBox(layoutBox);return{animationId:this.root.animationId,measuredBox:pageBox,layoutBox,latestValues:{},source:this.id};}measurePageBox(){var _this$scroll;const{visualElement}=this.options;if(!visualElement)return createBox();const box=visualElement.measureViewportBox();const wasInScrollRoot=((_this$scroll=this.scroll)===null||_this$scroll===void 0?void 0:_this$scroll.wasRoot)||this.path.some(checkNodeWasScrollRoot);if(!wasInScrollRoot){// Remove viewport scroll to give page-relative coordinates\nconst{scroll}=this.root;if(scroll){translateAxis(box.x,scroll.offset.x);translateAxis(box.y,scroll.offset.y);}}return box;}removeElementScroll(box){var _this$scroll2;const boxWithoutScroll=createBox();copyBoxInto(boxWithoutScroll,box);if((_this$scroll2=this.scroll)!==null&&_this$scroll2!==void 0&&_this$scroll2.wasRoot){return boxWithoutScroll;}/**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */for(let i=0;i<this.path.length;i++){const node=this.path[i];const{scroll,options}=node;if(node!==this.root&&scroll&&options.layoutScroll){/**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */if(scroll.wasRoot){copyBoxInto(boxWithoutScroll,box);}translateAxis(boxWithoutScroll.x,scroll.offset.x);translateAxis(boxWithoutScroll.y,scroll.offset.y);}}return boxWithoutScroll;}applyTransform(box){let transformOnly=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const withTransforms=createBox();copyBoxInto(withTransforms,box);for(let i=0;i<this.path.length;i++){const node=this.path[i];if(!transformOnly&&node.options.layoutScroll&&node.scroll&&node!==node.root){transformBox(withTransforms,{x:-node.scroll.offset.x,y:-node.scroll.offset.y});}if(!hasTransform(node.latestValues))continue;transformBox(withTransforms,node.latestValues);}if(hasTransform(this.latestValues)){transformBox(withTransforms,this.latestValues);}return withTransforms;}removeTransform(box){const boxWithoutTransform=createBox();copyBoxInto(boxWithoutTransform,box);for(let i=0;i<this.path.length;i++){const node=this.path[i];if(!node.instance)continue;if(!hasTransform(node.latestValues))continue;hasScale(node.latestValues)&&node.updateSnapshot();const sourceBox=createBox();const nodeBox=node.measurePageBox();copyBoxInto(sourceBox,nodeBox);removeBoxTransforms(boxWithoutTransform,node.latestValues,node.snapshot?node.snapshot.layoutBox:undefined,sourceBox);}if(hasTransform(this.latestValues)){removeBoxTransforms(boxWithoutTransform,this.latestValues);}return boxWithoutTransform;}setTargetDelta(delta){this.targetDelta=delta;this.root.scheduleUpdateProjection();this.isProjectionDirty=true;}setOptions(options){this.options=_objectSpread(_objectSpread(_objectSpread({},this.options),options),{},{crossfade:options.crossfade!==undefined?options.crossfade:true});}clearMeasurements(){this.scroll=undefined;this.layout=undefined;this.snapshot=undefined;this.prevTransformTemplateValue=undefined;this.targetDelta=undefined;this.target=undefined;this.isLayoutDirty=false;}forceRelativeParentToResolveTarget(){if(!this.relativeParent)return;/**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */if(this.relativeParent.resolvedRelativeTargetAt!==frameData.timestamp){this.relativeParent.resolveTargetDelta(true);}}resolveTargetDelta(){var _this$parent;let forceRecalculation=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;/**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */const lead=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=lead.isProjectionDirty);this.isTransformDirty||(this.isTransformDirty=lead.isTransformDirty);this.isSharedProjectionDirty||(this.isSharedProjectionDirty=lead.isSharedProjectionDirty);const isShared=Boolean(this.resumingFrom)||this!==lead;/**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */const canSkip=!(forceRecalculation||isShared&&this.isSharedProjectionDirty||this.isProjectionDirty||(_this$parent=this.parent)!==null&&_this$parent!==void 0&&_this$parent.isProjectionDirty||this.attemptToResolveRelativeTarget||this.root.updateBlockedByResize);if(canSkip)return;const{layout,layoutId}=this.options;/**\n             * If we have no layout, we can't perform projection, so early return\n             */if(!this.layout||!(layout||layoutId))return;this.resolvedRelativeTargetAt=frameData.timestamp;/**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */if(!this.targetDelta&&!this.relativeTarget){const relativeParent=this.getClosestProjectingParent();if(relativeParent&&relativeParent.layout&&this.animationProgress!==1){this.relativeParent=relativeParent;this.forceRelativeParentToResolveTarget();this.relativeTarget=createBox();this.relativeTargetOrigin=createBox();calcRelativePosition(this.relativeTargetOrigin,this.layout.layoutBox,relativeParent.layout.layoutBox);copyBoxInto(this.relativeTarget,this.relativeTargetOrigin);}else{this.relativeParent=this.relativeTarget=undefined;}}/**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */if(!this.relativeTarget&&!this.targetDelta)return;/**\n             * Lazy-init target data structure\n             */if(!this.target){this.target=createBox();this.targetWithTransforms=createBox();}/**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */if(this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target){this.forceRelativeParentToResolveTarget();calcRelativeBox(this.target,this.relativeTarget,this.relativeParent.target);/**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */}else if(this.targetDelta){if(Boolean(this.resumingFrom)){// TODO: This is creating a new object every frame\nthis.target=this.applyTransform(this.layout.layoutBox);}else{copyBoxInto(this.target,this.layout.layoutBox);}applyBoxDelta(this.target,this.targetDelta);}else{/**\n                 * If no target, use own layout as target\n                 */copyBoxInto(this.target,this.layout.layoutBox);}/**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */if(this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=false;const relativeParent=this.getClosestProjectingParent();if(relativeParent&&Boolean(relativeParent.resumingFrom)===Boolean(this.resumingFrom)&&!relativeParent.options.layoutScroll&&relativeParent.target&&this.animationProgress!==1){this.relativeParent=relativeParent;this.forceRelativeParentToResolveTarget();this.relativeTarget=createBox();this.relativeTargetOrigin=createBox();calcRelativePosition(this.relativeTargetOrigin,this.target,relativeParent.target);copyBoxInto(this.relativeTarget,this.relativeTargetOrigin);}else{this.relativeParent=this.relativeTarget=undefined;}}/**\n             * Increase debug counter for resolved target deltas\n             */if(statsBuffer.value){metrics.calculatedTargetDeltas++;}}getClosestProjectingParent(){if(!this.parent||hasScale(this.parent.latestValues)||has2DTranslate(this.parent.latestValues)){return undefined;}if(this.parent.isProjecting()){return this.parent;}else{return this.parent.getClosestProjectingParent();}}isProjecting(){return Boolean((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout);}calcProjection(){var _this$parent2;const lead=this.getLead();const isShared=Boolean(this.resumingFrom)||this!==lead;let canSkip=true;/**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */if(this.isProjectionDirty||(_this$parent2=this.parent)!==null&&_this$parent2!==void 0&&_this$parent2.isProjectionDirty){canSkip=false;}/**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */if(isShared&&(this.isSharedProjectionDirty||this.isTransformDirty)){canSkip=false;}/**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */if(this.resolvedRelativeTargetAt===frameData.timestamp){canSkip=false;}if(canSkip)return;const{layout,layoutId}=this.options;/**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */this.isTreeAnimating=Boolean(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation);if(!this.isTreeAnimating){this.targetDelta=this.relativeTarget=undefined;}if(!this.layout||!(layout||layoutId))return;/**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */copyBoxInto(this.layoutCorrected,this.layout.layoutBox);/**\n             * Record previous tree scales before updating.\n             */const prevTreeScaleX=this.treeScale.x;const prevTreeScaleY=this.treeScale.y;/**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */applyTreeDeltas(this.layoutCorrected,this.treeScale,this.path,isShared);/**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */if(lead.layout&&!lead.target&&(this.treeScale.x!==1||this.treeScale.y!==1)){lead.target=lead.layout.layoutBox;lead.targetWithTransforms=createBox();}const{target}=lead;if(!target){/**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */if(this.prevProjectionDelta){this.createProjectionDeltas();this.scheduleRender();}return;}if(!this.projectionDelta||!this.prevProjectionDelta){this.createProjectionDeltas();}else{copyAxisDeltaInto(this.prevProjectionDelta.x,this.projectionDelta.x);copyAxisDeltaInto(this.prevProjectionDelta.y,this.projectionDelta.y);}/**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */calcBoxDelta(this.projectionDelta,this.layoutCorrected,target,this.latestValues);if(this.treeScale.x!==prevTreeScaleX||this.treeScale.y!==prevTreeScaleY||!axisDeltaEquals(this.projectionDelta.x,this.prevProjectionDelta.x)||!axisDeltaEquals(this.projectionDelta.y,this.prevProjectionDelta.y)){this.hasProjected=true;this.scheduleRender();this.notifyListeners(\"projectionUpdate\",target);}/**\n             * Increase debug counter for recalculated projections\n             */if(statsBuffer.value){metrics.calculatedProjections++;}}hide(){this.isVisible=false;// TODO: Schedule render\n}show(){this.isVisible=true;// TODO: Schedule render\n}scheduleRender(){var _this$options$visualE;let notifyAll=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;(_this$options$visualE=this.options.visualElement)===null||_this$options$visualE===void 0?void 0:_this$options$visualE.scheduleRender();if(notifyAll){const stack=this.getStack();stack&&stack.scheduleRender();}if(this.resumingFrom&&!this.resumingFrom.instance){this.resumingFrom=undefined;}}createProjectionDeltas(){this.prevProjectionDelta=createDelta();this.projectionDelta=createDelta();this.projectionDeltaWithTransform=createDelta();}setAnimationOrigin(delta){let hasOnlyRelativeTargetChanged=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const snapshot=this.snapshot;const snapshotLatestValues=snapshot?snapshot.latestValues:{};const mixedValues=_objectSpread({},this.latestValues);const targetDelta=createDelta();if(!this.relativeParent||!this.relativeParent.options.layoutRoot){this.relativeTarget=this.relativeTargetOrigin=undefined;}this.attemptToResolveRelativeTarget=!hasOnlyRelativeTargetChanged;const relativeLayout=createBox();const snapshotSource=snapshot?snapshot.source:undefined;const layoutSource=this.layout?this.layout.source:undefined;const isSharedLayoutAnimation=snapshotSource!==layoutSource;const stack=this.getStack();const isOnlyMember=!stack||stack.members.length<=1;const shouldCrossfadeOpacity=Boolean(isSharedLayoutAnimation&&!isOnlyMember&&this.options.crossfade===true&&!this.path.some(hasOpacityCrossfade));this.animationProgress=0;let prevRelativeTarget;this.mixTargetDelta=latest=>{const progress=latest/1000;mixAxisDelta(targetDelta.x,delta.x,progress);mixAxisDelta(targetDelta.y,delta.y,progress);this.setTargetDelta(targetDelta);if(this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout){calcRelativePosition(relativeLayout,this.layout.layoutBox,this.relativeParent.layout.layoutBox);mixBox(this.relativeTarget,this.relativeTargetOrigin,relativeLayout,progress);/**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */if(prevRelativeTarget&&boxEquals(this.relativeTarget,prevRelativeTarget)){this.isProjectionDirty=false;}if(!prevRelativeTarget)prevRelativeTarget=createBox();copyBoxInto(prevRelativeTarget,this.relativeTarget);}if(isSharedLayoutAnimation){this.animationValues=mixedValues;mixValues(mixedValues,snapshotLatestValues,this.latestValues,progress,shouldCrossfadeOpacity,isOnlyMember);}this.root.scheduleUpdateProjection();this.scheduleRender();this.animationProgress=progress;};this.mixTargetDelta(this.options.layoutRoot?1000:0);}startAnimation(options){var _this$currentAnimatio,_this$resumingFrom,_this$resumingFrom$cu;this.notifyListeners(\"animationStart\");(_this$currentAnimatio=this.currentAnimation)===null||_this$currentAnimatio===void 0?void 0:_this$currentAnimatio.stop();(_this$resumingFrom=this.resumingFrom)===null||_this$resumingFrom===void 0?void 0:(_this$resumingFrom$cu=_this$resumingFrom.currentAnimation)===null||_this$resumingFrom$cu===void 0?void 0:_this$resumingFrom$cu.stop();if(this.pendingAnimation){cancelFrame(this.pendingAnimation);this.pendingAnimation=undefined;}/**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */this.pendingAnimation=frame.update(()=>{globalProjectionState.hasAnimatedSinceResize=true;activeAnimations.layout++;this.motionValue||(this.motionValue=motionValue(0));this.currentAnimation=animateSingleValue(this.motionValue,[0,1000],_objectSpread(_objectSpread({},options),{},{velocity:0,isSync:true,onUpdate:latest=>{this.mixTargetDelta(latest);options.onUpdate&&options.onUpdate(latest);},onStop:()=>{activeAnimations.layout--;},onComplete:()=>{activeAnimations.layout--;options.onComplete&&options.onComplete();this.completeAnimation();}}));if(this.resumingFrom){this.resumingFrom.currentAnimation=this.currentAnimation;}this.pendingAnimation=undefined;});}completeAnimation(){if(this.resumingFrom){this.resumingFrom.currentAnimation=undefined;this.resumingFrom.preserveOpacity=undefined;}const stack=this.getStack();stack&&stack.exitAnimationComplete();this.resumingFrom=this.currentAnimation=this.animationValues=undefined;this.notifyListeners(\"animationComplete\");}finishAnimation(){if(this.currentAnimation){this.mixTargetDelta&&this.mixTargetDelta(animationTarget);this.currentAnimation.stop();}this.completeAnimation();}applyTransformsToTarget(){const lead=this.getLead();let{targetWithTransforms,target,layout,latestValues}=lead;if(!targetWithTransforms||!target||!layout)return;/**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */if(this!==lead&&this.layout&&layout&&shouldAnimatePositionOnly(this.options.animationType,this.layout.layoutBox,layout.layoutBox)){target=this.target||createBox();const xLength=calcLength(this.layout.layoutBox.x);target.x.min=lead.target.x.min;target.x.max=target.x.min+xLength;const yLength=calcLength(this.layout.layoutBox.y);target.y.min=lead.target.y.min;target.y.max=target.y.min+yLength;}copyBoxInto(targetWithTransforms,target);/**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */transformBox(targetWithTransforms,latestValues);/**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */calcBoxDelta(this.projectionDeltaWithTransform,this.layoutCorrected,targetWithTransforms,latestValues);}registerSharedNode(layoutId,node){if(!this.sharedNodes.has(layoutId)){this.sharedNodes.set(layoutId,new NodeStack());}const stack=this.sharedNodes.get(layoutId);stack.add(node);const config=node.options.initialPromotionConfig;node.promote({transition:config?config.transition:undefined,preserveFollowOpacity:config&&config.shouldPreserveFollowOpacity?config.shouldPreserveFollowOpacity(node):undefined});}isLead(){const stack=this.getStack();return stack?stack.lead===this:true;}getLead(){var _this$getStack;const{layoutId}=this.options;return layoutId?((_this$getStack=this.getStack())===null||_this$getStack===void 0?void 0:_this$getStack.lead)||this:this;}getPrevLead(){var _this$getStack2;const{layoutId}=this.options;return layoutId?(_this$getStack2=this.getStack())===null||_this$getStack2===void 0?void 0:_this$getStack2.prevLead:undefined;}getStack(){const{layoutId}=this.options;if(layoutId)return this.root.sharedNodes.get(layoutId);}promote(){let{needsReset,transition,preserveFollowOpacity}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const stack=this.getStack();if(stack)stack.promote(this,preserveFollowOpacity);if(needsReset){this.projectionDelta=undefined;this.needsReset=true;}if(transition)this.setOptions({transition});}relegate(){const stack=this.getStack();if(stack){return stack.relegate(this);}else{return false;}}resetSkewAndRotation(){const{visualElement}=this.options;if(!visualElement)return;// If there's no detected skew or rotation values, we can early return without a forced render.\nlet hasDistortingTransform=false;/**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */const{latestValues}=visualElement;if(latestValues.z||latestValues.rotate||latestValues.rotateX||latestValues.rotateY||latestValues.rotateZ||latestValues.skewX||latestValues.skewY){hasDistortingTransform=true;}// If there's no distorting values, we don't need to do any more.\nif(!hasDistortingTransform)return;const resetValues={};if(latestValues.z){resetDistortingTransform(\"z\",visualElement,resetValues,this.animationValues);}// Check the skew and rotate value of all axes and reset to 0\nfor(let i=0;i<transformAxes.length;i++){resetDistortingTransform(\"rotate\".concat(transformAxes[i]),visualElement,resetValues,this.animationValues);resetDistortingTransform(\"skew\".concat(transformAxes[i]),visualElement,resetValues,this.animationValues);}// Force a render of this element to apply the transform with all skews and rotations\n// set to 0.\nvisualElement.render();// Put back all the values we reset\nfor(const key in resetValues){visualElement.setStaticValue(key,resetValues[key]);if(this.animationValues){this.animationValues[key]=resetValues[key];}}// Schedule a render for the next frame. This ensures we won't visually\n// see the element with the reset rotate value applied.\nvisualElement.scheduleRender();}getProjectionStyles(styleProp){if(!this.instance||this.isSVG)return undefined;if(!this.isVisible){return hiddenVisibility;}const styles={visibility:\"\"};const transformTemplate=this.getTransformTemplate();if(this.needsReset){this.needsReset=false;styles.opacity=\"\";styles.pointerEvents=resolveMotionValue(styleProp===null||styleProp===void 0?void 0:styleProp.pointerEvents)||\"\";styles.transform=transformTemplate?transformTemplate(this.latestValues,\"\"):\"none\";return styles;}const lead=this.getLead();if(!this.projectionDelta||!this.layout||!lead.target){const emptyStyles={};if(this.options.layoutId){emptyStyles.opacity=this.latestValues.opacity!==undefined?this.latestValues.opacity:1;emptyStyles.pointerEvents=resolveMotionValue(styleProp===null||styleProp===void 0?void 0:styleProp.pointerEvents)||\"\";}if(this.hasProjected&&!hasTransform(this.latestValues)){emptyStyles.transform=transformTemplate?transformTemplate({},\"\"):\"none\";this.hasProjected=false;}return emptyStyles;}const valuesToRender=lead.animationValues||lead.latestValues;this.applyTransformsToTarget();styles.transform=buildProjectionTransform(this.projectionDeltaWithTransform,this.treeScale,valuesToRender);if(transformTemplate){styles.transform=transformTemplate(valuesToRender,styles.transform);}const{x,y}=this.projectionDelta;styles.transformOrigin=\"\".concat(x.origin*100,\"% \").concat(y.origin*100,\"% 0\");if(lead.animationValues){var _ref3,_valuesToRender$opaci;/**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */styles.opacity=lead===this?(_ref3=(_valuesToRender$opaci=valuesToRender.opacity)!==null&&_valuesToRender$opaci!==void 0?_valuesToRender$opaci:this.latestValues.opacity)!==null&&_ref3!==void 0?_ref3:1:this.preserveOpacity?this.latestValues.opacity:valuesToRender.opacityExit;}else{/**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */styles.opacity=lead===this?valuesToRender.opacity!==undefined?valuesToRender.opacity:\"\":valuesToRender.opacityExit!==undefined?valuesToRender.opacityExit:0;}/**\n             * Apply scale correction\n             */for(const key in scaleCorrectors){if(valuesToRender[key]===undefined)continue;const{correct,applyTo,isCSSVariable}=scaleCorrectors[key];/**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */const corrected=styles.transform===\"none\"?valuesToRender[key]:correct(valuesToRender[key],lead);if(applyTo){const num=applyTo.length;for(let i=0;i<num;i++){styles[applyTo[i]]=corrected;}}else{// If this is a CSS variable, set it directly on the instance.\n// Replacing this function from creating styles to setting them\n// would be a good place to remove per frame object creation\nif(isCSSVariable){this.options.visualElement.renderState.vars[key]=corrected;}else{styles[key]=corrected;}}}/**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */if(this.options.layoutId){styles.pointerEvents=lead===this?resolveMotionValue(styleProp===null||styleProp===void 0?void 0:styleProp.pointerEvents)||\"\":\"none\";}return styles;}clearSnapshot(){this.resumeFrom=this.snapshot=undefined;}// Only run on root\nresetTree(){this.root.nodes.forEach(node=>{var _node$currentAnimatio;return(_node$currentAnimatio=node.currentAnimation)===null||_node$currentAnimatio===void 0?void 0:_node$currentAnimatio.stop();});this.root.nodes.forEach(clearMeasurements);this.root.sharedNodes.clear();}};}function updateLayout(node){node.updateLayout();}function notifyLayoutUpdate(node){var _node$resumeFrom;const snapshot=((_node$resumeFrom=node.resumeFrom)===null||_node$resumeFrom===void 0?void 0:_node$resumeFrom.snapshot)||node.snapshot;if(node.isLead()&&node.layout&&snapshot&&node.hasListeners(\"didUpdate\")){const{layoutBox:layout,measuredBox:measuredLayout}=node.layout;const{animationType}=node.options;const isShared=snapshot.source!==node.layout.source;// TODO Maybe we want to also resize the layout snapshot so we don't trigger\n// animations for instance if layout=\"size\" and an element has only changed position\nif(animationType===\"size\"){eachAxis(axis=>{const axisSnapshot=isShared?snapshot.measuredBox[axis]:snapshot.layoutBox[axis];const length=calcLength(axisSnapshot);axisSnapshot.min=layout[axis].min;axisSnapshot.max=axisSnapshot.min+length;});}else if(shouldAnimatePositionOnly(animationType,snapshot.layoutBox,layout)){eachAxis(axis=>{const axisSnapshot=isShared?snapshot.measuredBox[axis]:snapshot.layoutBox[axis];const length=calcLength(layout[axis]);axisSnapshot.max=axisSnapshot.min+length;/**\n                 * Ensure relative target gets resized and rerendererd\n                 */if(node.relativeTarget&&!node.currentAnimation){node.isProjectionDirty=true;node.relativeTarget[axis].max=node.relativeTarget[axis].min+length;}});}const layoutDelta=createDelta();calcBoxDelta(layoutDelta,layout,snapshot.layoutBox);const visualDelta=createDelta();if(isShared){calcBoxDelta(visualDelta,node.applyTransform(measuredLayout,true),snapshot.measuredBox);}else{calcBoxDelta(visualDelta,layout,snapshot.layoutBox);}const hasLayoutChanged=!isDeltaZero(layoutDelta);let hasRelativeLayoutChanged=false;if(!node.resumeFrom){const relativeParent=node.getClosestProjectingParent();/**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */if(relativeParent&&!relativeParent.resumeFrom){const{snapshot:parentSnapshot,layout:parentLayout}=relativeParent;if(parentSnapshot&&parentLayout){const relativeSnapshot=createBox();calcRelativePosition(relativeSnapshot,snapshot.layoutBox,parentSnapshot.layoutBox);const relativeLayout=createBox();calcRelativePosition(relativeLayout,layout,parentLayout.layoutBox);if(!boxEqualsRounded(relativeSnapshot,relativeLayout)){hasRelativeLayoutChanged=true;}if(relativeParent.options.layoutRoot){node.relativeTarget=relativeLayout;node.relativeTargetOrigin=relativeSnapshot;node.relativeParent=relativeParent;}}}}node.notifyListeners(\"didUpdate\",{layout,snapshot,delta:visualDelta,layoutDelta,hasLayoutChanged,hasRelativeLayoutChanged});}else if(node.isLead()){const{onExitComplete}=node.options;onExitComplete&&onExitComplete();}/**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */node.options.transition=undefined;}function propagateDirtyNodes(node){/**\n     * Increase debug counter for nodes encountered this frame\n     */if(statsBuffer.value){metrics.nodes++;}if(!node.parent)return;/**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */if(!node.isProjecting()){node.isProjectionDirty=node.parent.isProjectionDirty;}/**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */node.isSharedProjectionDirty||(node.isSharedProjectionDirty=Boolean(node.isProjectionDirty||node.parent.isProjectionDirty||node.parent.isSharedProjectionDirty));node.isTransformDirty||(node.isTransformDirty=node.parent.isTransformDirty);}function cleanDirtyNodes(node){node.isProjectionDirty=node.isSharedProjectionDirty=node.isTransformDirty=false;}function clearSnapshot(node){node.clearSnapshot();}function clearMeasurements(node){node.clearMeasurements();}function clearIsLayoutDirty(node){node.isLayoutDirty=false;}function resetTransformStyle(node){const{visualElement}=node.options;if(visualElement&&visualElement.getProps().onBeforeLayoutMeasure){visualElement.notify(\"BeforeLayoutMeasure\");}node.resetTransform();}function finishAnimation(node){node.finishAnimation();node.targetDelta=node.relativeTarget=node.target=undefined;node.isProjectionDirty=true;}function resolveTargetDelta(node){node.resolveTargetDelta();}function calcProjection(node){node.calcProjection();}function resetSkewAndRotation(node){node.resetSkewAndRotation();}function removeLeadSnapshots(stack){stack.removeLeadSnapshot();}function mixAxisDelta(output,delta,p){output.translate=mixNumber(delta.translate,0,p);output.scale=mixNumber(delta.scale,1,p);output.origin=delta.origin;output.originPoint=delta.originPoint;}function mixAxis(output,from,to,p){output.min=mixNumber(from.min,to.min,p);output.max=mixNumber(from.max,to.max,p);}function mixBox(output,from,to,p){mixAxis(output.x,from.x,to.x,p);mixAxis(output.y,from.y,to.y,p);}function hasOpacityCrossfade(node){return node.animationValues&&node.animationValues.opacityExit!==undefined;}const defaultLayoutTransition={duration:0.45,ease:[0.4,0,0.1,1]};const userAgentContains=string=>typeof navigator!==\"undefined\"&&navigator.userAgent&&navigator.userAgent.toLowerCase().includes(string);/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */const roundPoint=userAgentContains(\"applewebkit/\")&&!userAgentContains(\"chrome/\")?Math.round:noop;function roundAxis(axis){// Round to the nearest .5 pixels to support subpixel layouts\naxis.min=roundPoint(axis.min);axis.max=roundPoint(axis.max);}function roundBox(box){roundAxis(box.x);roundAxis(box.y);}function shouldAnimatePositionOnly(animationType,snapshot,layout){return animationType===\"position\"||animationType===\"preserve-aspect\"&&!isNear(aspectRatio(snapshot),aspectRatio(layout),0.2);}function checkNodeWasScrollRoot(node){var _node$scroll;return node!==node.root&&((_node$scroll=node.scroll)===null||_node$scroll===void 0?void 0:_node$scroll.wasRoot);}export{cleanDirtyNodes,createProjectionNode,mixAxis,mixAxisDelta,mixBox,propagateDirtyNodes};","map":{"version":3,"names":["statsBuffer","isSVGElement","isSVGSVGElement","getValueTransition","cancelFrame","time","frameData","frameSteps","microtask","frame","activeAnimations","motionValue","mixNumber","SubscriptionManager","clamp","noop","animateSingleValue","getOptimisedAppearId","FlatTree","delay","resolveMotionValue","mixValues","copyBoxInto","copyAxisDeltaInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcLength","calcRelativePosition","calcRelativeBox","calcBoxDelta","isNear","removeBoxTransforms","createBox","createDelta","boxEqualsRounded","isDeltaZero","axisDeltaEquals","aspectRatio","boxEquals","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","globalProjectionState","metrics","nodes","calculatedTargetDeltas","calculatedProjections","transformAxes","hiddenVisibility","visibility","animationTarget","id","resetDistortingTransform","key","visualElement","values","sharedAnimationValues","latestValues","setStaticValue","cancelTreeOptimisedTransformAnimations","projectionNode","hasCheckedOptimisedAppear","root","options","appearId","window","MotionHasOptimisedAnimation","layout","layoutId","MotionCancelOptimisedAnimation","parent","createProjectionNode","_ref","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","arguments","length","undefined","animationId","children","Set","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","hasTreeAnimated","updateScheduled","scheduleUpdate","update","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","value","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","addProjectionMetrics","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","depth","i","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","_len","args","Array","_key","notify","hasListeners","mount","instance","current","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","animate","_ref2","delta","hasLayoutChanged","hasRelativeLayoutChanged","newLayout","isTreeAnimationBlocked","target","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","hasTargetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","animationOptions","_objectSpread","onPlay","onComplete","shouldReduceMotion","type","startAnimation","setAnimationOrigin","isLead","onExitComplete","unmount","willUpdate","remove","stack","getStack","delete","clear","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","node","updateScroll","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","timestamp","isProcessing","process","preRender","render","didUpdate","read","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","measuredBox","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","source","_this$scroll","box","measureViewportBox","wasInScrollRoot","some","checkNodeWasScrollRoot","_this$scroll2","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","forceRelativeParentToResolveTarget","relativeParent","_this$parent","forceRecalculation","lead","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","_this$parent2","pendingAnimation","prevTreeScaleX","prevTreeScaleY","prevProjectionDelta","createProjectionDeltas","hide","show","_this$options$visualE","notifyAll","projectionDeltaWithTransform","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","_this$currentAnimatio","_this$resumingFrom","_this$resumingFrom$cu","stop","velocity","isSync","onUpdate","onStop","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","_this$getStack","getPrevLead","_this$getStack2","prevLead","relegate","hasDistortingTransform","z","rotate","rotateX","rotateY","rotateZ","skewX","skewY","resetValues","concat","getProjectionStyles","styleProp","styles","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","_ref3","_valuesToRender$opaci","opacityExit","correct","applyTo","isCSSVariable","corrected","num","renderState","vars","resetTree","_node$currentAnimatio","_node$resumeFrom","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","Math","round","roundAxis","_node$scroll"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { statsBuffer, isSVGElement, isSVGSVGElement, getValueTransition, cancelFrame, time, frameData, frameSteps, microtask, frame, activeAnimations, motionValue, mixNumber } from 'motion-dom';\nimport { SubscriptionManager, clamp, noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcLength, calcRelativePosition, calcRelativeBox, calcBoxDelta, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst metrics = {\n    nodes: 0,\n    calculatedTargetDeltas: 0,\n    calculatedProjections: 0,\n};\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent?.()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (statsBuffer.value) {\n                    metrics.nodes =\n                        metrics.calculatedTargetDeltas =\n                            metrics.calculatedProjections =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (statsBuffer.addProjectionMetrics) {\n                    statsBuffer.addProjectionMetrics(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance) && !isSVGSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (this.root.hasTreeAnimated && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const hasTargetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout);\n                    /*\n                     * Note: Disabled to fix relative animations always triggering new\n                     * layout animations. If this causes further issues, we can try\n                     * a different approach to detecting relative target changes.\n                     */\n                    // || hasRelativeLayoutChanged\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\n                    if (this.options.layoutRoot ||\n                        this.resumeFrom ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (hasTargetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                        /**\n                         * Set animation origin after starting animation to avoid layout jump\n                         * caused by stopping previous layout animation\n                         */\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            this.eventHandlers.clear();\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n            if (this.snapshot &&\n                !calcLength(this.snapshot.measuredBox.x) &&\n                !calcLength(this.snapshot.measuredBox.y)) {\n                this.snapshot = undefined;\n            }\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement && this.instance) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                this.instance &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = this.scroll?.wasRoot || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if (this.scroll?.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                this.parent?.isProjectionDirty ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || this.parent?.isProjectionDirty) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedProjections++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.visualElement?.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation?.stop();\n            this.resumingFrom?.currentAnimation?.stop();\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                activeAnimations.layout++;\n                this.motionValue || (this.motionValue = motionValue(0));\n                this.currentAnimation = animateSingleValue(this.motionValue, [0, 1000], {\n                    ...options,\n                    velocity: 0,\n                    isSync: true,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onStop: () => {\n                        activeAnimations.layout--;\n                    },\n                    onComplete: () => {\n                        activeAnimations.layout--;\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.lead || this : this;\n        }\n        getPrevLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity ??\n                            this.latestValues.opacity ??\n                            1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    // If this is a CSS variable, set it directly on the instance.\n                    // Replacing this function from creating styles to setting them\n                    // would be a good place to remove per frame object creation\n                    if (isCSSVariable) {\n                        this.options.visualElement.renderState.vars[key] = corrected;\n                    }\n                    else {\n                        styles[key] = corrected;\n                    }\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp?.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => node.currentAnimation?.stop());\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    const snapshot = node.resumeFrom?.snapshot || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeLayoutChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeLayoutChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeLayoutChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (statsBuffer.value) {\n        metrics.nodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    return node !== node.root && node.scroll?.wasRoot;\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}