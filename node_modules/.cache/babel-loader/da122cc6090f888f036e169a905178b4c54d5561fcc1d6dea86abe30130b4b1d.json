{"ast":null,"code":"import{useEffect}from'react';import{addDomEvent}from'./add-dom-event.mjs';/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */function useDomEvent(ref,eventName,handler,options){useEffect(()=>{const element=ref.current;if(handler&&element){return addDomEvent(element,eventName,handler,options);}},[ref,eventName,handler,options]);}export{useDomEvent};","map":{"version":3,"names":["useEffect","addDomEvent","useDomEvent","ref","eventName","handler","options","element","current"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/events/use-dom-event.mjs"],"sourcesContent":["import { useEffect } from 'react';\nimport { addDomEvent } from './add-dom-event.mjs';\n\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(() => {\n        const element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { useDomEvent };\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,OAAO,CACjC,OAASC,WAAW,KAAQ,qBAAqB,CAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,WAAWA,CAACC,GAAG,CAAEC,SAAS,CAAEC,OAAO,CAAEC,OAAO,CAAE,CACnDN,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAO,OAAO,CAAGJ,GAAG,CAACK,OAAO,CAC3B,GAAIH,OAAO,EAAIE,OAAO,CAAE,CACpB,MAAO,CAAAN,WAAW,CAACM,OAAO,CAAEH,SAAS,CAAEC,OAAO,CAAEC,OAAO,CAAC,CAC5D,CACJ,CAAC,CAAE,CAACH,GAAG,CAAEC,SAAS,CAAEC,OAAO,CAAEC,OAAO,CAAC,CAAC,CAC1C,CAEA,OAASJ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}