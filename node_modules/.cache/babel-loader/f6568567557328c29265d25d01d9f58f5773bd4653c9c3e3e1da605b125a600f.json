{"ast":null,"code":"import{invariant,warning}from'motion-utils';import{useContext}from'react';import{MotionContext}from'../context/MotionContext/index.mjs';import{useMotionValue}from'./use-motion-value.mjs';import{useTransform}from'./use-transform.mjs';// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nconst maxScale=100000;const invertScale=scale=>scale>0.001?1/scale:maxScale;let hasWarned=false;/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */function useInvertedScale(scale){let parentScaleX=useMotionValue(1);let parentScaleY=useMotionValue(1);const{visualElement}=useContext(MotionContext);invariant(!!(scale||visualElement),\"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");warning(hasWarned,\"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");hasWarned=true;if(scale){parentScaleX=scale.scaleX||parentScaleX;parentScaleY=scale.scaleY||parentScaleY;}else if(visualElement){parentScaleX=visualElement.getValue(\"scaleX\",1);parentScaleY=visualElement.getValue(\"scaleY\",1);}const scaleX=useTransform(parentScaleX,invertScale);const scaleY=useTransform(parentScaleY,invertScale);return{scaleX,scaleY};}export{invertScale,useInvertedScale};","map":{"version":3,"names":["invariant","warning","useContext","MotionContext","useMotionValue","useTransform","maxScale","invertScale","scale","hasWarned","useInvertedScale","parentScaleX","parentScaleY","visualElement","scaleX","scaleY","getValue"],"sources":["/home/antisyn/portfolio/src/components/node_modules/framer-motion/dist/es/value/use-inverted-scale.mjs"],"sourcesContent":["import { invariant, warning } from 'motion-utils';\nimport { useContext } from 'react';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { useTransform } from './use-transform.mjs';\n\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nconst maxScale = 100000;\nconst invertScale = (scale) => scale > 0.001 ? 1 / scale : maxScale;\nlet hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */\nfunction useInvertedScale(scale) {\n    let parentScaleX = useMotionValue(1);\n    let parentScaleY = useMotionValue(1);\n    const { visualElement } = useContext(MotionContext);\n    invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n    warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n    hasWarned = true;\n    if (scale) {\n        parentScaleX = scale.scaleX || parentScaleX;\n        parentScaleY = scale.scaleY || parentScaleY;\n    }\n    else if (visualElement) {\n        parentScaleX = visualElement.getValue(\"scaleX\", 1);\n        parentScaleY = visualElement.getValue(\"scaleY\", 1);\n    }\n    const scaleX = useTransform(parentScaleX, invertScale);\n    const scaleY = useTransform(parentScaleY, invertScale);\n    return { scaleX, scaleY };\n}\n\nexport { invertScale, useInvertedScale };\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,OAAO,KAAQ,cAAc,CACjD,OAASC,UAAU,KAAQ,OAAO,CAClC,OAASC,aAAa,KAAQ,oCAAoC,CAClE,OAASC,cAAc,KAAQ,wBAAwB,CACvD,OAASC,YAAY,KAAQ,qBAAqB,CAElD;AACA;AACA;AACA,KAAM,CAAAC,QAAQ,CAAG,MAAM,CACvB,KAAM,CAAAC,WAAW,CAAIC,KAAK,EAAKA,KAAK,CAAG,KAAK,CAAG,CAAC,CAAGA,KAAK,CAAGF,QAAQ,CACnE,GAAI,CAAAG,SAAS,CAAG,KAAK,CACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,gBAAgBA,CAACF,KAAK,CAAE,CAC7B,GAAI,CAAAG,YAAY,CAAGP,cAAc,CAAC,CAAC,CAAC,CACpC,GAAI,CAAAQ,YAAY,CAAGR,cAAc,CAAC,CAAC,CAAC,CACpC,KAAM,CAAES,aAAc,CAAC,CAAGX,UAAU,CAACC,aAAa,CAAC,CACnDH,SAAS,CAAC,CAAC,EAAEQ,KAAK,EAAIK,aAAa,CAAC,CAAE,4GAA4G,CAAC,CACnJZ,OAAO,CAACQ,SAAS,CAAE,yFAAyF,CAAC,CAC7GA,SAAS,CAAG,IAAI,CAChB,GAAID,KAAK,CAAE,CACPG,YAAY,CAAGH,KAAK,CAACM,MAAM,EAAIH,YAAY,CAC3CC,YAAY,CAAGJ,KAAK,CAACO,MAAM,EAAIH,YAAY,CAC/C,CAAC,IACI,IAAIC,aAAa,CAAE,CACpBF,YAAY,CAAGE,aAAa,CAACG,QAAQ,CAAC,QAAQ,CAAE,CAAC,CAAC,CAClDJ,YAAY,CAAGC,aAAa,CAACG,QAAQ,CAAC,QAAQ,CAAE,CAAC,CAAC,CACtD,CACA,KAAM,CAAAF,MAAM,CAAGT,YAAY,CAACM,YAAY,CAAEJ,WAAW,CAAC,CACtD,KAAM,CAAAQ,MAAM,CAAGV,YAAY,CAACO,YAAY,CAAEL,WAAW,CAAC,CACtD,MAAO,CAAEO,MAAM,CAAEC,MAAO,CAAC,CAC7B,CAEA,OAASR,WAAW,CAAEG,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}